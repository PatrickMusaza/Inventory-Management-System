
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.ResultSetMetaData;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Patrick
 */
public class Credit extends javax.swing.JPanel {

    /**
     * Creates new form Credit
     */
    public Credit() {
        initComponents();
        table_updates();
        generateInvoiceCode();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        Invoice = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        Export = new javax.swing.JButton();
        status = new javax.swing.JComboBox<>();
        search = new javax.swing.JButton();
        startDate = new com.toedter.calendar.JDateChooser();
        endDate = new com.toedter.calendar.JDateChooser();
        jLabel9 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        Paid = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Date");

        Invoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InvoiceActionPerformed(evt);
            }
        });
        Invoice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                InvoiceKeyReleased(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("Status");

        Export.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        Export.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/share.png"))); // NOI18N
        Export.setText("Export");
        Export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportActionPerformed(evt);
            }
        });

        status.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Paid", "Unpaid" }));
        status.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusActionPerformed(evt);
            }
        });
        status.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                statusKeyReleased(evt);
            }
        });

        search.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        search.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/loupe.png"))); // NOI18N
        search.setText("Search");
        search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchMouseClicked(evt);
            }
        });
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        startDate.setMaximumSize(new java.awt.Dimension(90, 30));

        endDate.setMaximumSize(new java.awt.Dimension(90, 30));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel9.setText("-");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Customer");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(endDate, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Invoice, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(233, 233, 233)
                .addComponent(search)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Export)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(endDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(Invoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7)
                                .addComponent(jLabel8)
                                .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(search)
                                .addComponent(Export)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer ID", "Customer Name", "Status", "Balance"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable3MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTable3MouseEntered(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jLabel1.setText("Transaction Details");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTable2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Invoice ID", "Sale Date", "Method", "Debited", "Credited", "Balance"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setText("Item Details List");

        Paid.setBackground(new java.awt.Color(0, 102, 0));
        Paid.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Paid.setForeground(new java.awt.Color(255, 255, 255));
        Paid.setText("Paid");
        Paid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PaidActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Paid)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(Paid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Item Name", "Qty", "Unit Price", "Sale Amount", "VAT"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    PreparedStatement insert, Bal;
    NumberFormat formatter = NumberFormat.getInstance();

    public String generateInvoiceCode() {
        String Code = "";

        try {
            Connection con = Connect.getConnection();
            PreparedStatement statement = con.prepareStatement("SELECT COUNT(CreatedAt) FROM sales");
            ResultSet result = statement.executeQuery();

            if (result.next()) {
                int count = result.getInt(1);
                Code = "INV " + (1000 + count + 1);
            }
        } catch (SQLException ex) {
            java.util.logging.Logger.getLogger(SalesTransaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        return Code;
    }

    public void table_updates() {
        try {
            Connection con = Connect.getConnection();
            String credit = "Credit";

            PreparedStatement selectCustomers = con.prepareStatement(
                    "SELECT s.CustomerID, s.CustomerName, s.TotalAmount "
                    + "FROM sales s "
                    + "JOIN ( "
                    + "    SELECT CustomerID, MAX(CreatedAt) AS LatestCreatedAt "
                    + "    FROM sales "
                    + "    WHERE (Type = ? OR Type = ?) AND NOT(Status = ?) "
                    + "    GROUP BY CustomerID "
                    + ") latest ON s.CustomerID = latest.CustomerID AND s.CreatedAt = latest.LatestCreatedAt "
                    + "WHERE (s.Type = ? OR s.Type = ?) AND NOT(s.Status = ?) "
                    + "GROUP BY s.CustomerID"
            );
            selectCustomers.setString(1, credit);
            selectCustomers.setString(2, "Paid");
            selectCustomers.setString(3, "Refunded");
            selectCustomers.setString(4, credit);
            selectCustomers.setString(5, "Paid");
            selectCustomers.setString(6, "Refunded");
            ResultSet rsCustomers = selectCustomers.executeQuery();

            DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
            model.setRowCount(0);

            // Iterate over each customer
            while (rsCustomers.next()) {
                String customerId = rsCustomers.getString("CustomerID");
                String customerName = rsCustomers.getString("CustomerName");
                double totalAmount = rsCustomers.getDouble("TotalAmount");

                PreparedStatement selectSOUT = con.prepareStatement("SELECT SUM(SOUT) AS TotalSOUT,SUM(SIN) AS TotalSIN FROM sales WHERE CustomerID = ?");
                selectSOUT.setString(1, customerId);
                ResultSet rsSOUT = selectSOUT.executeQuery();
                double soutTotal = 0, sinTotal = 0;
                double balance = 0;
                if (rsSOUT.next()) {
                    soutTotal = rsSOUT.getFloat("TotalSOUT");
                    sinTotal = rsSOUT.getFloat("TotalSIN");
                    balance = soutTotal - sinTotal;
                }

                // Add customer information to the table model
                Vector<Object> row = new Vector<>();
                row.add(customerId);
                row.add(customerName);
                if (totalAmount != 0) {
                    row.add("Unpaid");
                } else {
                    row.add("Full Payment");
                }
                row.add(formatter.format(balance));
                model.addRow(row);
            }

        } catch (SQLException ex) {
            java.util.logging.Logger.getLogger(Credit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }


    private void InvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InvoiceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InvoiceActionPerformed

    private void InvoiceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_InvoiceKeyReleased
        // TODO add your handling code here:

        DefaultTableModel src = (DefaultTableModel) jTable3.getModel();
        TableRowSorter<DefaultTableModel> obj = new TableRowSorter<>(src);
        jTable3.setRowSorter(obj);
        obj.setRowFilter(RowFilter.regexFilter(Invoice.getText(), 1));
    }//GEN-LAST:event_InvoiceKeyReleased

    private void ExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportActionPerformed
        // TODO add your handling code here:    
        File file = createExcelFile();
        exportToCSV(jTable2, jTable1, file, true);

    }//GEN-LAST:event_ExportActionPerformed

    private static File createExcelFile() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save CSV File");

        FileNameExtensionFilter filter = new FileNameExtensionFilter("CSV files (*.csv)", "csv");
        fileChooser.setFileFilter(filter);

        int userSelection = fileChooser.showSaveDialog(null);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();

            String filePath = fileToSave.getAbsolutePath();
            if (!filePath.toLowerCase().endsWith(".csv")) {
                fileToSave = new File(filePath + ".csv");
            }
            return fileToSave;
        } else {
            return null;
        }
    }

    private void exportToCSV(JTable table1, JTable table2, File file, boolean writeHeaders) {
        FileWriter writer = null;

        DefaultTableModel tab = (DefaultTableModel) jTable3.getModel();
        int index = jTable3.getSelectedRow();

        String CustID = tab.getValueAt(index, 0).toString();
        String CustName = tab.getValueAt(index, 1).toString();

        try {
            writer = new FileWriter(file, true);

            writer.write("""
                             Salam Trading Company Ltd
                             Gisenyi-Rubavu-Rwanda
                             (+250) 788 888 888
                             
                             Customer ID:""" + CustID
                    + "\nCustomer Name:" + CustName
                    + "\n\n\n");

            if (writeHeaders) {
                for (int i = 0; i < table1.getColumnCount(); i++) {
                    writer.write(table1.getColumnName(i));
                    if (i < table1.getColumnCount() - 1) {
                        writer.write(",");
                    }
                }
                writer.write("\n");
            }

            // Export jTable2
            for (int i = 0; i < table1.getRowCount(); i++) {
                for (int j = 0; j < table1.getColumnCount(); j++) {
                    Object value = table1.getValueAt(i, j);
                    if (value != null) {
                        // Check if the value is a number and format it accordingly
                        if (value.toString().contains(",")) {
                            writer.write(value.toString().replace(',', ' '));
                        } else {
                            writer.write(value.toString());
                        }
                    }
                    if (j < table1.getColumnCount() - 1) {
                        writer.write(",");
                    }
                }
                writer.write("\n");
            }

            writer.write("\nItems Information Details\n\n");

            if (writeHeaders) {
                for (int i = 0; i < table2.getColumnCount(); i++) {
                    writer.write(table2.getColumnName(i));
                    if (i < table2.getColumnCount() - 1) {
                        writer.write(",");
                    }
                }
                writer.write("\n");
            }

            // Export jTable1
            for (int i = 0; i < table2.getRowCount(); i++) {
                for (int j = 0; j < table2.getColumnCount(); j++) {
                    Object value = table2.getValueAt(i, j);
                    if (value != null) {
                        // Check if the value is a number and format it accordingly
                        if (value.toString().contains(",")) {
                            writer.write(value.toString().replace(',', ' '));
                        } else {
                            writer.write(value.toString());
                        }
                    }
                    if (j < table2.getColumnCount() - 1) {
                        writer.write(",");
                    }
                }
                writer.write("\n");
            }
            JOptionPane.showMessageDialog(null, file.getName() + " exported to CSV file successfully.", "File Exported", JOptionPane.PLAIN_MESSAGE);

        } catch (IOException ex) {
            Logger.getLogger(Credit.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (writer != null) {
                    writer.close();
                }
            } catch (IOException ex) {
                Logger.getLogger(Credit.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public static String customFormat(double value) {
        DecimalFormat myFormatter = new DecimalFormat("###,###.##");
        String formattedValue = myFormatter.format(value);

        // If the formatted value contains commas, remove them
        formattedValue = formattedValue.replace(",", "");

        // Insert apostrophes as thousand separators
        StringBuilder result = new StringBuilder();
        int length = formattedValue.length();
        int count = 0;
        for (int i = length - 1; i >= 0; i--) {
            result.insert(0, formattedValue.charAt(i));
            count++;
            if (count == 3 && i != 0 && formattedValue.charAt(i - 1) != '-') {
                result.insert(0, '\'');
                count = 0;
            }
        }
        return result.toString();
    }


    private void statusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusActionPerformed
        // TODO add your handling code here:
        DefaultTableModel src = (DefaultTableModel) jTable3.getModel();
        TableRowSorter<DefaultTableModel> obj = new TableRowSorter<>(src);
        jTable3.setRowSorter(obj);
        obj.setRowFilter(RowFilter.regexFilter(status.getSelectedItem().toString(), 2));
    }//GEN-LAST:event_statusActionPerformed

    private void statusKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_statusKeyReleased
        // TODO add your handling code here:

        DefaultTableModel src = (DefaultTableModel) jTable3.getModel();
        TableRowSorter<DefaultTableModel> obj = new TableRowSorter<>(src);
        jTable3.setRowSorter(obj);
        obj.setRowFilter(RowFilter.regexFilter(status.getSelectedItem().toString(), 2));
    }//GEN-LAST:event_statusKeyReleased

    private void searchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_searchMouseClicked

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:

        try {

            Connection con = Connect.getConnection();

            Date sd = startDate.getDate();
            Date ed = endDate.getDate();

            if ((sd != null) && (ed == null)) {
                SimpleDateFormat sDate = new SimpleDateFormat("yyyy-MM-dd");
                String date = sDate.format(startDate.getDate());
                DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
                TableRowSorter tr = new TableRowSorter(model);
                jTable3.setRowSorter(tr);
                tr.setRowFilter(RowFilter.regexFilter(date.trim(), 2));
            } else if ((sd != null) && (ed != null)) {
                DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
                TableRowSorter<DefaultTableModel> tr = new TableRowSorter<>(model);
                jTable3.setRowSorter(tr);

                RowFilter<DefaultTableModel, Integer> dateRangeFilter = new RowFilter<DefaultTableModel, Integer>() {
                    @Override
                    public boolean include(RowFilter.Entry<? extends DefaultTableModel, ? extends Integer> entry) {
                        try {
                            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                            Date startDate = sd;
                            Date endDate = ed;

                            Object value = entry.getModel().getValueAt(entry.getIdentifier(), 2);
                            if (value != null) {
                                Date dateValue = dateFormat.parse(value.toString());
                                return dateValue.compareTo(startDate) >= 0 && dateValue.compareTo(endDate) <= 0;
                            }
                        } catch (ParseException e) {
                            e.printStackTrace();
                        }
                        return false;
                    }
                };

                tr.setRowFilter(dateRangeFilter);
            }

            /*
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String startDateStr = sdf.format(startDate.getDate());
            String endDateStr = sdf.format(endDate.getDate());
            
            String search = "SELECT * FROM sales WHERE SaleDate >= ? AND SaleDate <= ? AND Type=?";
            PreparedStatement srch = con.prepareStatement(search);
            srch.setString(1, startDateStr);
            srch.setString(2, endDateStr);
            srch.setString(3, "Credit");
            ResultSet rs = srch.executeQuery();
            
            jTable3.setModel(DbUtils.resultSetToTableModel(rs));*/
        } catch (SQLException ex) {
            Logger.getLogger(Credit.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // TODO add your handling code here:

        DefaultTableModel Df = (DefaultTableModel) jTable2.getModel();
        int selectedIndex = jTable2.getSelectedRow();

        String InvoiceID = (Df.getValueAt(selectedIndex, 0).toString());

        int count;

        try {

            Connection con = Connect.getConnection();

            insert = con.prepareStatement("select * from salesitem where RefSale=?");
            insert.setString(1, InvoiceID);

            ResultSet rs = insert.executeQuery();
            ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
            count = rsmd.getColumnCount();

            DefaultTableModel Df2 = (DefaultTableModel) jTable1.getModel();
            Df2.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();

                for (int i = 1; i <= count; i++) {

                    v2.add(rs.getString("ItemCode"));
                    v2.add(rs.getString("ItemName"));
                    v2.add(formatter.format(rs.getDouble("SalesQty")));
                    v2.add(formatter.format(rs.getDouble("UnitPrice")));
                    v2.add(formatter.format(rs.getDouble("TotalPrice")));
                    v2.add(formatter.format(rs.getDouble("vAT")));

                }

                Df2.addRow(v2);
            }

        } catch (SQLException ex) {
            java.util.logging.Logger.getLogger(Credit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTable2MouseClicked

    private void PaidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PaidActionPerformed
        // TODO add your handling code here:
        if (!ValidateForm.isInternetReachable()) {
            try {
                Connection con = Connect.getConnection();
                con.close();
                JOptionPane.showMessageDialog(null, "There is no internet Connection!", "Internet Connectivity", JOptionPane.ERROR_MESSAGE);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else {
            DefaultTableModel Df = (DefaultTableModel) jTable3.getModel();
            int selectedIndex = jTable3.getSelectedRow();

            String InvoiceID = (Df.getValueAt(selectedIndex, 0).toString());

            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            Date today = new Date();
            String now = dateFormat.format(today);

            try {
                Connection con = Connect.getConnection();

                int confirm = JOptionPane.showConfirmDialog(null, "Do you want to mark this Sale as Paid for this Customer", "Warning", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {

                    PreparedStatement Method = con.prepareStatement("Select Method from Payment");
                    ResultSet met = Method.executeQuery();
                    List<String> methods = new ArrayList<>();
                    while (met.next()) {
                        String method = met.getString("Method");
                        methods.add(method);
                    }

                    JComboBox<String> methodDropdown = new JComboBox<>(methods.toArray(new String[0]));

                    int choice = JOptionPane.showConfirmDialog(null, methodDropdown, "Select Payment Method", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
                    int choice1 = JOptionPane.showConfirmDialog(null, "Do you want to enter an amount?", "Amount", JOptionPane.YES_NO_CANCEL_OPTION);

                    if (choice == JOptionPane.YES_OPTION) {
                        if (choice1 == JOptionPane.YES_OPTION) {
                            String selectedMethod = (String) methodDropdown.getSelectedItem();
                            String amountInput = null;

                            // Loop until a valid numeric value is entered or user cancels
                            while (true) {
                                amountInput = JOptionPane.showInputDialog(null, "Enter Amount");

                                // Check if the input is blank or null
                                if (amountInput == null || amountInput.trim().isEmpty()) {
                                    JOptionPane.showMessageDialog(null, "Amount cannot be blank. Please enter a valid numeric value.");
                                    continue; // Continue looping until a valid input is provided or user cancels
                                }

                                // Check if the input is numeric
                                try {
                                    double amount = Double.parseDouble(amountInput);
                                    // If input is numeric, break out of the loop
                                    break;
                                } catch (NumberFormatException e) {
                                    JOptionPane.showMessageDialog(null, "Invalid input. Please enter a valid numeric value.");
                                }
                            }

                            DefaultTableModel Df1 = (DefaultTableModel) jTable3.getModel();
                            int selected = jTable3.getSelectedRow();

                            String CustomerID = Df1.getValueAt(selected, 0).toString();
                            String CustomerName = Df1.getValueAt(selected, 1).toString();
                            String amou = Df1.getValueAt(selected, 3).toString();
                            amou = amou.replace(",", "");
                            String Code = generateInvoiceCode();

                            if (amountInput != null) {
                                if (Double.parseDouble(amountInput) - 1 < Double.parseDouble(amou)) {
                                    // Inserting the sale record
                                    insert = con.prepareStatement("INSERT INTO sales (CustomerID, InvoiceID, SaleDate, Method, SIN, Ref_Inv, Type, CustomerName, CreatedBy, Status) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                                    insert.setString(1, CustomerID);
                                    insert.setString(2, Code);
                                    insert.setString(3, now);
                                    insert.setString(4, selectedMethod);
                                    insert.setString(5, amountInput);
                                    insert.setString(6, InvoiceID);
                                    insert.setString(7, "Paid");
                                    insert.setString(8, CustomerName);
                                    insert.setString(9, Login.Username.getText());
                                    insert.setString(10, "Paid");
                                    insert.executeUpdate();

                                    PreparedStatement selectSOUT = con.prepareStatement("SELECT SUM(SOUT) AS TotalSOUT,SUM(SIN) AS TotalSIN FROM sales WHERE CustomerID = ?");
                                    selectSOUT.setString(1, CustomerID);
                                    ResultSet rsSOUT = selectSOUT.executeQuery();
                                    double soutTotal = 0, sinTotal = 0;
                                    double balance = 0;
                                    if (rsSOUT.next()) {
                                        soutTotal = rsSOUT.getFloat("TotalSOUT");
                                        sinTotal = rsSOUT.getFloat("TotalSIN");
                                        balance = soutTotal - sinTotal;

                                        PreparedStatement updateBalance = con.prepareStatement("UPDATE sales SET TotalAmount = ? WHERE InvoiceID = ?");
                                        updateBalance.setDouble(1, balance);
                                        updateBalance.setString(2, Code);
                                        updateBalance.executeUpdate();

                                    }

                                    if (selectedMethod.contains("Bank")) {

                                        insert = con.prepareStatement("update bank set Purpose=?,GivenBy=?,ReceivedBy=?,BIN=?,Balance=?,Bank=? where TxnId=?");
                                        insert.setString(1, "Paid Credit");
                                        insert.setString(2, CustomerName);
                                        insert.setString(3, Login.Username.getText());
                                        insert.setString(4, amountInput);
                                        insert.setString(5, amountInput);
                                        insert.setString(6, selectedMethod);
                                        insert.setString(7, InvoiceID);

                                        insert.executeUpdate();

                                        Bal = con.prepareStatement("select SUM(BIN) as BIN, SUM(BOUT) as BOUT from bank where bank=?");
                                        Bal.setString(1, selectedMethod);

                                        ResultSet rs = Bal.executeQuery();
                                        float IN, OUT, bal = 0;
                                        if (rs.next()) {
                                            IN = rs.getFloat("BIN");
                                            OUT = rs.getFloat("BOUT");
                                            bal = IN - OUT;
                                        }

                                        insert = con.prepareStatement("update bank set Balance=? where TxnId=?");
                                        insert.setFloat(1, bal);
                                        insert.setString(2, InvoiceID);

                                        insert.executeUpdate();

                                    }

                                    JOptionPane.showMessageDialog(null, "Payment Succeed!");
                                    table_updates();
                                } else {
                                    // Handle case where user cancels
                                    JOptionPane.showMessageDialog(null, "Payment can't exceed " + amou);
                                }
                            } else {
                                // Handle case where user cancels
                                JOptionPane.showMessageDialog(null, "Payment Canceled!");
                            }
                        } else {
                            // Handle case where user clicks "No" or "Cancel"
                            JOptionPane.showMessageDialog(null, "Payment canceled!");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "No Method of Payment Selected", "Method of Payment", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(Credit.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_PaidActionPerformed

    private void jTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MouseClicked
        // TODO add your handling code here:

        DefaultTableModel Df = (DefaultTableModel) jTable3.getModel();
        int selectedIndex = jTable3.getSelectedRow();
        String CustomerID = (Df.getValueAt(selectedIndex, 0).toString());

        try {
            Connection con = Connect.getConnection();

            insert = con.prepareStatement("SELECT * FROM sales WHERE CustomerID=? AND (Type=? OR Type=?) AND NOT(status=?)");
            insert.setString(1, CustomerID);
            insert.setString(2, "Credit");
            insert.setString(3, "Paid");
            insert.setString(4, "Refunded");

            ResultSet rs = insert.executeQuery();

            DefaultTableModel Df2 = (DefaultTableModel) jTable2.getModel();
            Df2.setRowCount(0);

            DefaultTableModel Df3 = (DefaultTableModel) jTable1.getModel();
            Df3.setRowCount(0);

            while (rs.next()) {
                String InvoiceID = rs.getString("InvoiceID");

                Vector v2 = new Vector();
                v2.add(InvoiceID);
                v2.add(rs.getString("SaleDate"));
                v2.add(rs.getString("Method"));
                v2.add(formatter.format(rs.getDouble("SIN")));
                v2.add(formatter.format(rs.getDouble("SOUT")));
                v2.add(formatter.format(rs.getDouble("TotalAmount")));
                Df2.addRow(v2);

                PreparedStatement itemStmt = con.prepareStatement("SELECT * FROM salesitem WHERE RefSale=?");
                itemStmt.setString(1, InvoiceID);
                ResultSet itemRs = itemStmt.executeQuery();

                while (itemRs.next()) {
                    Vector v3 = new Vector();
                    v3.add(itemRs.getString("ItemCode"));
                    v3.add(itemRs.getString("ItemName"));
                    v3.add(formatter.format(itemRs.getDouble("SalesQty")));
                    v3.add(formatter.format(itemRs.getDouble("UnitPrice")));
                    v3.add(formatter.format(itemRs.getDouble("TotalPrice")));
                    v3.add(formatter.format(itemRs.getDouble("vAT")));
                    Df3.addRow(v3);
                }
            }
        } catch (SQLException ex) {
            java.util.logging.Logger.getLogger(Credit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTable3MouseClicked

    private void jTable3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable3MouseEntered


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Export;
    private javax.swing.JTextField Invoice;
    private javax.swing.JButton Paid;
    private com.toedter.calendar.JDateChooser endDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JButton search;
    private com.toedter.calendar.JDateChooser startDate;
    private javax.swing.JComboBox<String> status;
    // End of variables declaration//GEN-END:variables
}
