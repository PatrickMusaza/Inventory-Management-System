
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Patrick
 */
public class InventoryM extends javax.swing.JPanel {

    private boolean isNew = false;

    /**
     * Creates new form InventoryMa
     */
    public InventoryM() {
        initComponents();
        table_update();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        srcCode = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        srcName = new javax.swing.JTextField();
        Search = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        CurrentQty = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        UpdatedQty = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        AvgPrch = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        StockAmount = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Remark = new javax.swing.JTextArea();
        Update = new javax.swing.JButton();
        Cancel = new javax.swing.JButton();
        Status = new javax.swing.JLabel();
        ItemCode = new javax.swing.JLabel();

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(64, 60, 60)));

        jLabel19.setText("Item Code");

        srcCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                srcCodeKeyReleased(evt);
            }
        });

        jLabel20.setText("Item Name");

        srcName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                srcNameKeyReleased(evt);
            }
        });

        Search.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Search.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/loupe.png"))); // NOI18N
        Search.setText("Search");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(srcCode, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(srcName, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74)
                .addComponent(Search)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(srcName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Search)
                    .addComponent(srcCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Item Name", "Safety Qty", "Beginning Stock", "Purchase", "Sales", "Current Stock", "Quantity Change", "Average Purchase Price", "Stock Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setText("Current Quantiy");

        CurrentQty.setEditable(false);

        jLabel2.setText("Updated Quantiy");

        UpdatedQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                UpdatedQtyKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                UpdatedQtyKeyTyped(evt);
            }
        });

        jLabel3.setText("Avg Purchase Price");

        AvgPrch.setEditable(false);

        jLabel4.setText("New Stock Amount");

        StockAmount.setEditable(false);

        jLabel5.setText("Remark");

        Remark.setColumns(20);
        Remark.setRows(5);
        jScrollPane1.setViewportView(Remark);

        Update.setBackground(new java.awt.Color(119, 119, 193));
        Update.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        Update.setForeground(new java.awt.Color(255, 255, 255));
        Update.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/update.png"))); // NOI18N
        Update.setText("Update");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        Cancel.setBackground(new java.awt.Color(228, 116, 116));
        Cancel.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        Cancel.setForeground(new java.awt.Color(255, 255, 255));
        Cancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/delete1.png"))); // NOI18N
        Cancel.setText("Cancel");
        Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelActionPerformed(evt);
            }
        });

        Status.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N

        ItemCode.setForeground(new java.awt.Color(242, 242, 242));
        ItemCode.setText("Item Code");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(CurrentQty, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(24, 24, 24)
                        .addComponent(UpdatedQty, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Update, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(AvgPrch, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(StockAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ItemCode))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Status, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(CurrentQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(UpdatedQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Update))
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(AvgPrch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(StockAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Cancel)
                    .addComponent(Status, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel5))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ItemCode, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    PreparedStatement insert, select, Current;

    private void table_update() {

        int count;

        try {
            Connection con = Connect.getConnection();
            insert = con.prepareStatement("select * from stock where not(SafetyQty=?)");
            insert.setString(1, "");

            ResultSet rs = insert.executeQuery();
            ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
            count = rsmd.getColumnCount();

            DefaultTableModel Df = (DefaultTableModel) jTable1.getModel();
            Df.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();
                NumberFormat formatter = NumberFormat.getInstance();

                for (int i = 1; i <= count; i++) {

                    v2.add(rs.getString("ItemCode"));
                    v2.add(rs.getString("ItemName"));
                    v2.add(rs.getString("SafetyQty"));
                    v2.add(formatter.format(rs.getDouble("BeginningStock")));
                    v2.add(formatter.format(rs.getDouble("Purchase")));
                    v2.add(formatter.format(rs.getDouble("Sales")));
                    v2.add(formatter.format(rs.getDouble("CurrentStock")));
                    v2.add(rs.getString("ChangeQuantity"));
                    v2.add(formatter.format(rs.getDouble("PurchasePrice")));
                    v2.add(formatter.format(rs.getDouble("StockAmount")));
                    //v2.add(rs.getString("reportOn"));

                }
                Df.addRow(v2);
            }

        } catch (SQLException ex) {
            java.util.logging.Logger.getLogger(InventoryM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

    }

    private void srcCodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_srcCodeKeyReleased
        // TODO add your handling code here:

        DefaultTableModel src = (DefaultTableModel) jTable1.getModel();
        TableRowSorter<DefaultTableModel> obj = new TableRowSorter<>(src);
        jTable1.setRowSorter(obj);
        obj.setRowFilter(RowFilter.regexFilter(srcCode.getText(), 0));
    }//GEN-LAST:event_srcCodeKeyReleased

    private void srcNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_srcNameKeyReleased
        // TODO add your handling code here:

        DefaultTableModel src = (DefaultTableModel) jTable1.getModel();
        TableRowSorter<DefaultTableModel> obj = new TableRowSorter<>(src);
        jTable1.setRowSorter(obj);
        obj.setRowFilter(RowFilter.regexFilter(srcName.getText(), 1));
    }//GEN-LAST:event_srcNameKeyReleased

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        // TODO add your handling code here:

        DefaultTableModel src = (DefaultTableModel) jTable1.getModel();
        TableRowSorter<DefaultTableModel> obj = new TableRowSorter<>(src);
        jTable1.setRowSorter(obj);
        obj.setRowFilter(RowFilter.regexFilter(srcCode.getText(), 0));
        obj.setRowFilter(RowFilter.regexFilter(srcName.getText(), 1));
        //obj.setRowFilter(RowFilter.regexFilter(srcActive.getText()));
    }//GEN-LAST:event_SearchActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:

        int selectedRow = jTable1.getSelectedRow();
        int modelIndex = jTable1.convertRowIndexToModel(selectedRow);
        DefaultTableModel st = (DefaultTableModel) jTable1.getModel();
        this.AvgPrch.setText((String) st.getValueAt(modelIndex, 8));
        this.CurrentQty.setText((String) st.getValueAt(modelIndex, 6));
        this.ItemCode.setText(st.getValueAt(modelIndex, 0).toString());
        isNew = true;

        try {
            String Code = this.ItemCode.getText();

            Connection con = Connect.getConnection();
            select = con.prepareStatement("select * from stock where ItemCode=?");
            select.setString(1, Code);

            ResultSet sel = select.executeQuery();
            while (sel.next()) {
                if (sel.getString("Remark") == null) {
                    this.Remark.setText("");
                } else {
                    this.Remark.setText(sel.getString("Remark"));
                }
                if (!(sel.getString("Status") == null)) {
                    if (sel.getString("Status").equals("Canceled")) {
                        this.Status.setForeground(Color.red);
                    } else if (sel.getString("Status").equals("Approved")) {
                        this.Status.setForeground(Color.green);
                    } else {
                        this.Status.setForeground(Color.black);
                    }
                    this.Status.setText(sel.getString("Status"));
                } else {
                    this.Status.setText("");
                }
                if (sel.getString("NewQuantity") == null) {
                    this.UpdatedQty.setText("");
                } else {
                    this.UpdatedQty.setText(sel.getString("NewQuantity"));
                }
            }
        } catch (SQLException ex) {
            java.util.logging.Logger.getLogger(InventoryM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        double qty, price;
        double tot;
        try {
            qty = Double.parseDouble(this.UpdatedQty.getText().replaceAll(",", ""));
            price = Double.parseDouble(this.AvgPrch.getText().replaceAll(",", ""));
        } catch (NumberFormatException e) {
            e.printStackTrace();
            return;
        }

        tot = qty * price;

        this.StockAmount.setText(String.valueOf(tot));
    }//GEN-LAST:event_jTable1MouseClicked

    private void UpdatedQtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_UpdatedQtyKeyTyped
        // TODO add your handling code here:

        char c = evt.getKeyChar();

        if (!Character.isDigit(c) && c != '.') {
            evt.consume();
        }

        if (c == '.' && ((JTextField) evt.getSource()).getText().contains(".")) {
            evt.consume();
        }

    }//GEN-LAST:event_UpdatedQtyKeyTyped

    private void UpdatedQtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_UpdatedQtyKeyReleased
        // TODO add your handling code here:
        double qty, price;
        double tot;
        try {
            qty = Double.parseDouble(this.UpdatedQty.getText().replaceAll(",", ""));
            price = Double.parseDouble(this.AvgPrch.getText().replaceAll(",", ""));
        } catch (NumberFormatException e) {
            e.printStackTrace();
            return;
        }

        tot = qty * price;

        this.StockAmount.setText(String.valueOf(tot));

    }//GEN-LAST:event_UpdatedQtyKeyReleased

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        // TODO add your handling code here:
        if (!ValidateForm.isInternetReachable()) {
            try {
                Connection con = Connect.getConnection();
                con.close();
                JOptionPane.showMessageDialog(null, "There is no internet Connection!", "Internet Connectivity", JOptionPane.ERROR_MESSAGE);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else {

            String Qty = this.UpdatedQty.getText().replaceAll(",", "");
            String current = this.CurrentQty.getText().replaceAll(",", "");

            double qtyNow = Double.parseDouble(Qty);
            double qtyOld = Double.parseDouble(current);

            if (Qty.isBlank() && (current.equals(Qty))) {
                JOptionPane.showMessageDialog(null, "Please enter the updated quantity", "Enter New Quantity", JOptionPane.ERROR_MESSAGE);
            } else if (!(isNew)) {
                JOptionPane.showMessageDialog(null, "Please select the item to change", "Select Row", JOptionPane.ERROR_MESSAGE);
            } else if ((qtyNow > qtyOld) && (qtyNow == qtyOld)) {
                JOptionPane.showMessageDialog(null, "The Current Stock should be greater than the updated Stock!", "Invalid Stock", JOptionPane.ERROR_MESSAGE);
            } else if (qtyOld == 0) {
                JOptionPane.showMessageDialog(null, "Current Stock is Already Zero!", "No update", JOptionPane.ERROR_MESSAGE);
            } else {

                this.Status.setText("Pending Confirmation");

                try {
                    String Code = this.ItemCode.getText();
                    String Rmk = this.Remark.getText();
                    String Sts = this.Status.getText();

                    Connection con = Connect.getConnection();
                    insert = con.prepareStatement("update stock set NewQuantity=?, Remark=?, Status=? where ItemCode=?");
                    insert.setString(1, Qty);
                    insert.setString(2, Rmk);
                    insert.setString(3, Sts);
                    insert.setString(4, Code);

                    insert.executeUpdate();

                    JOptionPane.showMessageDialog(null, "New Quantity Updated");
                } catch (SQLException ex) {
                    java.util.logging.Logger.getLogger(InventoryM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                }

                this.AvgPrch.setText("");
                this.CurrentQty.setText("");
                this.ItemCode.setText("");
                this.Remark.setText("");
                this.Status.setText("");
                this.StockAmount.setText("");
                this.UpdatedQty.setText("");
            }
        }
    }//GEN-LAST:event_UpdateActionPerformed

    private void CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelActionPerformed
        // TODO add your handling code here:
        if (!ValidateForm.isInternetReachable()) {
            try {
                Connection con = Connect.getConnection();
                con.close();
                JOptionPane.showMessageDialog(null, "There is no internet Connection!", "Internet Connectivity", JOptionPane.ERROR_MESSAGE);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else {

            String Qty = this.UpdatedQty.getText().replaceAll(",", "");
            String current = this.CurrentQty.getText().replaceAll(",", "");

            double qtyNow = Double.parseDouble(Qty);
            double qtyOld = Double.parseDouble(current);

            if (Qty.isBlank() && (current.equals(Qty))) {
                JOptionPane.showMessageDialog(null, "Please enter the updated quantity", "Enter New Quantity", JOptionPane.ERROR_MESSAGE);
            } else if (!isNew) {
                JOptionPane.showMessageDialog(null, "Please select the item to change", "Select Row", JOptionPane.ERROR_MESSAGE);
            } else if (qtyNow < qtyOld) {
                JOptionPane.showMessageDialog(null, "PThe Current Stock should be greater than the updated Stock!", "Invalid Stock", JOptionPane.ERROR_MESSAGE);
            } else if (qtyOld == 0) {
                JOptionPane.showMessageDialog(null, "Current Stock is Already Zero!", "No update", JOptionPane.ERROR_MESSAGE);
            } else {

                this.Status.setText("Canceled");

                try {
                    String Code = this.ItemCode.getText();
                    String Rmk = this.Remark.getText();
                    String Sts = this.Status.getText();

                    Connection con = Connect.getConnection();
                    insert = con.prepareStatement("update stock set NewQuantity=?, Remark=?, Status=? where ItemCode=?");
                    insert.setString(1, null);
                    insert.setString(2, null);
                    insert.setString(3, Sts);
                    insert.setString(4, Code);

                    insert.executeUpdate();

                    JOptionPane.showMessageDialog(null, "New Quantity Canceled");
                } catch (SQLException ex) {
                    java.util.logging.Logger.getLogger(InventoryM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                }

                this.AvgPrch.setText("");
                this.CurrentQty.setText("");
                this.ItemCode.setText("");
                this.Remark.setText("");
                this.Status.setText("");
                this.StockAmount.setText("");
                this.UpdatedQty.setText("");
            }
        }
    }//GEN-LAST:event_CancelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AvgPrch;
    private javax.swing.JButton Cancel;
    private javax.swing.JTextField CurrentQty;
    private javax.swing.JLabel ItemCode;
    private javax.swing.JTextArea Remark;
    private javax.swing.JButton Search;
    private javax.swing.JLabel Status;
    private javax.swing.JTextField StockAmount;
    private javax.swing.JButton Update;
    private javax.swing.JTextField UpdatedQty;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField srcCode;
    private javax.swing.JTextField srcName;
    // End of variables declaration//GEN-END:variables
}
