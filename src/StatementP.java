
import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Patrick
 */
public class StatementP extends javax.swing.JPanel {

    JpanelLoaderMain jpload = new JpanelLoaderMain();

    /**
     * Creates new form StatementC
     */
    public StatementP() {
        initComponents();
        auto();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel6 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        status2 = new javax.swing.JComboBox<>();
        jPanel7 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        searchBetween2 = new javax.swing.JButton();
        startDate2 = new com.toedter.calendar.JDateChooser();
        endDate2 = new com.toedter.calendar.JDateChooser();
        jLabel16 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        All = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        gross = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        sales = new javax.swing.JLabel();
        creditors = new javax.swing.JLabel();
        grossProfit = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        purchases = new javax.swing.JLabel();
        overall = new javax.swing.JLabel();
        netAll = new javax.swing.JLabel();
        decision = new javax.swing.JLabel();
        toDate = new javax.swing.JLabel();
        from1 = new javax.swing.JLabel();
        frmDate = new javax.swing.JLabel();
        to = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        totExpenses = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        clStock = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        opStock = new javax.swing.JLabel();
        TotRevenue = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        TotCost = new javax.swing.JLabel();
        net = new javax.swing.JLabel();
        NetBfr = new javax.swing.JLabel();
        VAT = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        returns = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        TotRevenue1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        netAll1 = new javax.swing.JLabel();
        decision1 = new javax.swing.JLabel();
        overall1 = new javax.swing.JLabel();

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel13.setText("Financial Statement / Profit and Loss Statement");

        jLabel14.setBackground(new java.awt.Color(0, 0, 0));
        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel14.setText("Statement Type");

        status2.setBackground(new java.awt.Color(0, 153, 102));
        status2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        status2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cash On Hand", "Bank", "Profit and Loss" }));
        status2.setSelectedIndex(2);
        status2.setToolTipText("");
        status2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                status2statusMouseClicked(evt);
            }
        });
        status2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                status2statusActionPerformed(evt);
            }
        });
        status2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                status2statusKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(status2, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel13)
                    .addComponent(status2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 9, Short.MAX_VALUE))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel15.setText("Date");

        searchBetween2.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        searchBetween2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/loupe.png"))); // NOI18N
        searchBetween2.setText("Search");
        searchBetween2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchBetween2searchBetweenMouseClicked(evt);
            }
        });
        searchBetween2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBetween2searchBetweenActionPerformed(evt);
            }
        });

        startDate2.setMaximumSize(new java.awt.Dimension(90, 30));

        endDate2.setMaximumSize(new java.awt.Dimension(90, 30));

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel16.setText("-");

        jButton1.setBackground(new java.awt.Color(0, 102, 0));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Print");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(startDate2, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(endDate2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE)
                .addComponent(searchBetween2)
                .addGap(565, 565, 565)
                .addComponent(jButton1)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(startDate2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(endDate2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15)
                            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(searchBetween2)
                                .addComponent(jButton1)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        All.setBackground(new java.awt.Color(255, 255, 255));
        All.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 204, 102), 3, true));

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setText("PROFIT AND LOSS SUMMARY");

        gross.setFont(new java.awt.Font("Segoe UI Emoji", 1, 18)); // NOI18N
        gross.setForeground(new java.awt.Color(0, 181, 180));
        gross.setText("TOTAL GROSS PROFIT");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setText("SALES");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel4.setText("CREDITORS");

        sales.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        sales.setText("TOTAL SALES");

        creditors.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        creditors.setText("TOTAL CREDITORS");

        grossProfit.setFont(new java.awt.Font("Segoe UI Emoji", 1, 18)); // NOI18N
        grossProfit.setForeground(new java.awt.Color(0, 103, 0));
        grossProfit.setText("TOTAL GROSS PROFIT");

        jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel10.setText("TOTAL PURCHASES");

        purchases.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        purchases.setText("TOTAL PURCHASES");

        overall.setFont(new java.awt.Font("Segoe UI Symbol", 1, 36)); // NOI18N
        overall.setText("0");

        netAll.setFont(new java.awt.Font("Segoe UI Symbol", 1, 36)); // NOI18N
        netAll.setText("NET");

        decision.setFont(new java.awt.Font("Segoe UI Symbol", 1, 36)); // NOI18N
        decision.setText("PROFIT");

        toDate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        from1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        frmDate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        to.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel11.setText("OPERATING EXPENSES");

        totExpenses.setFont(new java.awt.Font("Segoe UI Emoji", 1, 18)); // NOI18N
        totExpenses.setForeground(new java.awt.Color(0, 51, 0));
        totExpenses.setText("TOTAL EXPENSES");

        jLabel12.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel12.setText("- CLOSING STOCK");

        clStock.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        clStock.setText("(TOTAL CLOSING STOCK)");

        jLabel17.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel17.setText("OPENING STOCK");

        opStock.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        opStock.setText("TOTAL OPENING STOCK");

        TotRevenue.setFont(new java.awt.Font("Segoe UI Emoji", 1, 18)); // NOI18N
        TotRevenue.setText("TOTAL REVENUE");

        jLabel19.setFont(new java.awt.Font("Segoe UI Emoji", 1, 18)); // NOI18N
        jLabel19.setText("TOTAL COST OF SALES");

        TotCost.setFont(new java.awt.Font("Segoe UI Emoji", 1, 18)); // NOI18N
        TotCost.setText("TOTAL COST");

        net.setFont(new java.awt.Font("Segoe UI Emoji", 1, 18)); // NOI18N
        net.setText("NET PROFIT BEFORE TAX");

        NetBfr.setFont(new java.awt.Font("Segoe UI Emoji", 1, 18)); // NOI18N
        NetBfr.setText("NET PROFIT BEFORE TAX");

        VAT.setFont(new java.awt.Font("Segoe UI Emoji", 1, 18)); // NOI18N
        VAT.setText("TOTAL VAT TAX");

        jLabel21.setFont(new java.awt.Font("Segoe UI Emoji", 1, 18)); // NOI18N
        jLabel21.setText("VAT TAX");

        jLabel2.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        jLabel2.setText("RWF");

        jLabel5.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        jLabel5.setText("RWF");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel6.setText("- RETURN INWARD");

        returns.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        returns.setText("TOTAL RETURN SALES");

        jLabel8.setText("_____________________________________");

        TotRevenue1.setFont(new java.awt.Font("Segoe UI Emoji", 1, 18)); // NOI18N
        TotRevenue1.setText("TOTAL REVENUE");

        jLabel7.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        jLabel7.setText("PARTICULARS");

        netAll1.setFont(new java.awt.Font("Segoe UI Symbol", 1, 36)); // NOI18N
        netAll1.setText("NET");

        decision1.setFont(new java.awt.Font("Segoe UI Symbol", 1, 36)); // NOI18N
        decision1.setText("PROFIT");

        overall1.setFont(new java.awt.Font("Segoe UI Symbol", 1, 36)); // NOI18N
        overall1.setText("0");

        javax.swing.GroupLayout AllLayout = new javax.swing.GroupLayout(All);
        All.setLayout(AllLayout);
        AllLayout.setHorizontalGroup(
            AllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AllLayout.createSequentialGroup()
                .addGroup(AllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AllLayout.createSequentialGroup()
                        .addGroup(AllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(AllLayout.createSequentialGroup()
                                .addGap(87, 87, 87)
                                .addComponent(netAll)
                                .addGap(7, 7, 7)
                                .addComponent(decision))
                            .addGroup(AllLayout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addGroup(AllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(AllLayout.createSequentialGroup()
                                        .addComponent(netAll1)
                                        .addGap(7, 7, 7)
                                        .addComponent(decision1))
                                    .addComponent(gross))))
                        .addGap(38, 38, 38))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AllLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(AllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6)
                            .addComponent(jLabel17)
                            .addComponent(jLabel10)
                            .addComponent(jLabel12)
                            .addComponent(jLabel19)
                            .addComponent(TotRevenue1)
                            .addComponent(jLabel7))
                        .addGap(26, 26, 26)))
                .addGroup(AllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(overall)
                    .addGroup(AllLayout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addGroup(AllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(AllLayout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(AllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(TotCost)
                                    .addGroup(AllLayout.createSequentialGroup()
                                        .addGroup(AllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(TotRevenue)
                                            .addComponent(jLabel5)
                                            .addComponent(sales)
                                            .addComponent(creditors, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(returns)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(143, 143, 143)
                                        .addGroup(AllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(to, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(from1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(toDate, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(frmDate, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(grossProfit)
                                    .addComponent(totExpenses)
                                    .addComponent(NetBfr)
                                    .addComponent(VAT)
                                    .addComponent(overall1)))
                            .addComponent(opStock, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(purchases, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clStock, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(AllLayout.createSequentialGroup()
                .addGroup(AllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AllLayout.createSequentialGroup()
                        .addGap(328, 328, 328)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(AllLayout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addGroup(AllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(net)
                            .addComponent(jLabel11)
                            .addComponent(jLabel21))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        AllLayout.setVerticalGroup(
            AllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AllLayout.createSequentialGroup()
                .addGroup(AllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AllLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(AllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(AllLayout.createSequentialGroup()
                                .addGroup(AllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(AllLayout.createSequentialGroup()
                                        .addGroup(AllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(58, 58, 58)
                                        .addComponent(creditors))
                                    .addGroup(AllLayout.createSequentialGroup()
                                        .addGap(27, 27, 27)
                                        .addComponent(sales)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(returns)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(AllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(AllLayout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(TotRevenue))
                                    .addGroup(AllLayout.createSequentialGroup()
                                        .addGap(44, 44, 44)
                                        .addComponent(purchases)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(opStock)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(clStock)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(TotCost))
                            .addGroup(AllLayout.createSequentialGroup()
                                .addComponent(from1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(frmDate, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(to, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(toDate, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(12, 12, 12))
                    .addGroup(AllLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addGap(32, 32, 32)
                        .addComponent(TotRevenue1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12)
                        .addGap(12, 12, 12)
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(AllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gross)
                    .addComponent(grossProfit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(totExpenses))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(net)
                    .addComponent(NetBfr))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(VAT))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(netAll1)
                    .addComponent(overall1)
                    .addComponent(decision1))
                .addGap(25, 25, 25)
                .addGroup(AllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(netAll)
                    .addComponent(overall)
                    .addComponent(decision))
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(All, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(All, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    PreparedStatement selectSales, selectPurchases, selectCreditors, selectExpenses, selectBegin, selectClose, selectTax;

    private void auto() {
        try {

            Connection con = Connect.getConnection();
            String Type = "Sale";

            double grossProfit;
            double revenue = 0;
            double cost = 0;
            double Return = 0;
            double TotExpense = 0;
            double Begin = 0;
            double Close = 0;
            double TotSales = 0;
            double TotCredit = 0;
            double TotPurchase = 0;
            double TotTax = 0;
            double bal = 0;
            double all = 0;

            NumberFormat formatter = NumberFormat.getInstance();

            selectSales = con.prepareStatement("select SUM(TotalAmount) as TotSales from sales where not(Type=?)");
            selectSales.setString(1, "Paid");
            ResultSet rs = selectSales.executeQuery();

            if (rs.next()) {
                TotSales = rs.getDouble("TotSales");
                String formattedSales = formatter.format(TotSales);
                this.sales.setText(String.valueOf(formattedSales));
            }

            selectSales = con.prepareStatement("select SUM(TotalAmount) as TotSales from sales where Status=?");
            selectSales.setString(1, "Refunded");
            ResultSet rss = selectSales.executeQuery();

            if (rss.next()) {
                Return = rss.getDouble("TotSales");
                String formattedReturn = formatter.format(Return);
                this.returns.setText(String.valueOf(formattedReturn));
            }

            selectCreditors = con.prepareStatement("select SUM(SIN) as TotCredit from sales");
            ResultSet rs1 = selectCreditors.executeQuery();

            if (rs1.next()) {
                TotCredit = rs1.getDouble("TotCredit");
                String formattedCredit = formatter.format(TotCredit);
                this.creditors.setText(String.valueOf(formattedCredit));
            }

            revenue = TotSales + TotCredit-Return;
            String formattedRevenue = formatter.format(revenue);
            this.TotRevenue.setText(String.valueOf(formattedRevenue));

            selectPurchases = con.prepareStatement("select SUM(TotalAmount) as TotPurchase from purchase");
            ResultSet rs2 = selectPurchases.executeQuery();

            if (rs2.next()) {
                TotPurchase = rs2.getDouble("TotPurchase");
                String formattedTotPurchase = formatter.format(TotPurchase);
                this.purchases.setText(String.valueOf(formattedTotPurchase));
            }

            selectBegin = con.prepareStatement("select SUM(BeginningStock*PurchasePrice) as Begin from Stock");
            ResultSet rs4 = selectBegin.executeQuery();

            if (rs4.next()) {
                Begin = rs4.getDouble("Begin");
                String formattedTotBegin = formatter.format(Begin);
                this.opStock.setText(String.valueOf(formattedTotBegin));
            }

            selectClose = con.prepareStatement("select SUM(StockAmount) as Close from Stock");
            ResultSet rs5 = selectClose.executeQuery();

            if (rs5.next()) {
                Close = rs5.getDouble("Close");
                String formattedTotClose = formatter.format(Close);
                this.clStock.setText("(" + String.valueOf(formattedTotClose) + ")");
            }

            cost = TotPurchase + Begin - Close;
            String formattedCost = formatter.format(cost);
            this.TotCost.setText(String.valueOf(formattedCost));

            grossProfit = revenue - cost;
            String formattedGrossProfit = formatter.format(grossProfit);
            if (grossProfit > 0) {
                this.grossProfit.setText(String.valueOf(formattedGrossProfit));
            } else {
                this.grossProfit.setText(String.valueOf(formattedGrossProfit));
                this.gross.setText("TOTAL GROSS LOSS ");
                this.gross.setForeground(Color.red);
                this.grossProfit.setForeground(Color.red);
            }

            selectExpenses = con.prepareStatement("select SUM(Amount) as TotExpense from Expense");
            ResultSet rs3 = selectExpenses.executeQuery();

            if (rs3.next()) {
                TotExpense = rs3.getDouble("TotExpense");
                String formattedTotExpense = formatter.format(TotExpense);
                this.totExpenses.setText(String.valueOf(formattedTotExpense));
            }
            
            bal = grossProfit - TotExpense;
            String formattedBal = formatter.format(bal);

            if (bal > 0) {
                this.NetBfr.setText(String.valueOf(formattedBal));
            } else if (bal <= 0) {
                this.net.setForeground(Color.red);
                this.NetBfr.setForeground(Color.red);
                this.net.setText("NET LOSS BEFORE TAX");
                this.NetBfr.setText(String.valueOf(formattedBal));
            }

            selectTax = con.prepareStatement("select SUM(VAT) as TotTax from sales where not(Type=?) and not(status=?)");
            selectTax.setString(1,"Credit");
            selectTax.setString(2, "Refunded");
            ResultSet rs6 = selectTax.executeQuery();

            if (rs6.next()) {
                TotTax = rs6.getDouble("TotTax");
                String formattedTax = formatter.format(TotTax);
                this.VAT.setText(String.valueOf(formattedTax));
            }

            all = bal - TotTax;
            String formattedAll = formatter.format(all);

            if (all > 0) {
                this.netAll.setForeground(Color.green);
                this.decision.setForeground(Color.green);
                this.overall1.setForeground(Color.green);
                this.overall1.setText(String.valueOf(formattedAll));
            } else if (all <= 0) {
                this.netAll.setForeground(Color.red);
                this.decision.setForeground(Color.red);
                this.decision.setText("LOSS");
                this.overall1.setForeground(Color.red);
                this.overall1.setText(String.valueOf(formattedAll));
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void status2statusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_status2statusMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_status2statusMouseClicked

    private void status2statusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_status2statusActionPerformed
        // TODO add your handling code here:

        String Method = this.status2.getSelectedItem().toString();

        switch (Method) {
            case "Cash On Hand": {
                StatementC stC = new StatementC();
                jpload.jPanelLoader(this, stC);
                break;
            }
            case "Cash At Bank": {
                StatementBC stBC = new StatementBC();
                jpload.jPanelLoader(this, stBC);
                break;
            }
            case "Bank": {
                StatementB stB = new StatementB();
                jpload.jPanelLoader(this, stB);
                break;
            }
            case "Profit and Loss": {
                StatementP stP = new StatementP();
                jpload.jPanelLoader(this, stP);
                break;
            }
            default:
                break;
        }

    }//GEN-LAST:event_status2statusActionPerformed

    private void status2statusKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_status2statusKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_status2statusKeyReleased

    private void searchBetween2searchBetweenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBetween2searchBetweenActionPerformed
        // TODO add your handling code here:

        try {

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String startDateStr = sdf.format(startDate2.getDate());
            String endDateStr = sdf.format(endDate2.getDate());

            this.from1.setText("FROM");
            this.frmDate.setText(startDateStr);
            this.to.setText("TO");
            this.toDate.setText(endDateStr);

            Connection con = Connect.getConnection();
            String Type = "Sale";

            double grossProfit;
            double revenue = 0;
            double cost = 0;
            double Return = 0;
            double TotExpense = 0;
            double Begin = 0;
            double Close = 0;
            double TotSales = 0;
            double TotCredit = 0;
            double TotPurchase = 0;
            double TotTax = 0;
            double bal = 0;
            double all = 0;

            NumberFormat formatter = NumberFormat.getInstance();

            selectSales = con.prepareStatement("select SUM(TotalAmount) as TotSales from sales where Type=? AND SaleDate >= ? AND SaleDate <= ?");
            selectSales.setString(1, Type);
            selectSales.setString(2, startDateStr);
            selectSales.setString(3, endDateStr);
            ResultSet rs = selectSales.executeQuery();

            if (rs.next()) {
                TotSales = rs.getDouble("TotSales");
                String formattedSales = formatter.format(TotSales);
                this.sales.setText(String.valueOf(formattedSales));
            }

            selectSales = con.prepareStatement("select SUM(TotalAmount) as TotSales from sales where Type=? and Status=? AND SaleDate >= ? AND SaleDate <= ?");
            selectSales.setString(1, Type);
            selectSales.setString(2, "Refunded");
            selectSales.setString(3, startDateStr);
            selectSales.setString(4, endDateStr);
            ResultSet rss = selectSales.executeQuery();

            if (rss.next()) {
                Return = rss.getDouble("TotSales");
                String formattedReturn = formatter.format(Return);
                this.returns.setText(String.valueOf(formattedReturn));
            }

            selectCreditors = con.prepareStatement("select SUM(SIN) as TotCredit from sales where SaleDate >= ? AND SaleDate <= ?");
            selectCreditors.setString(1, startDateStr);
            selectCreditors.setString(2, endDateStr);
            ResultSet rs1 = selectCreditors.executeQuery();

            if (rs1.next()) {
                TotCredit = rs1.getDouble("TotCredit");
                String formattedCredit = formatter.format(TotCredit);
                this.creditors.setText(String.valueOf(formattedCredit));
            }

            revenue = TotSales + TotCredit-Return;
            String formattedRevenue = formatter.format(revenue);
            this.TotRevenue.setText(String.valueOf(formattedRevenue));

            selectPurchases = con.prepareStatement("select SUM(TotalAmount) as TotPurchase from purchase where CreatedAt >= ? AND CreatedAt <= ?");
            selectPurchases.setString(1, startDateStr);
            selectPurchases.setString(2, endDateStr);
            ResultSet rs2 = selectPurchases.executeQuery();

            if (rs2.next()) {
                TotPurchase = rs2.getDouble("TotPurchase");
                String formattedTotPurchase = formatter.format(TotPurchase);
                this.purchases.setText(String.valueOf(formattedTotPurchase));
            }

            selectBegin = con.prepareStatement("select SUM(BeginningStock*PurchasePrice) as Begin from Stock where CreatedAt >= ? AND CreatedAt <= ?");
            selectBegin.setString(1, startDateStr);
            selectBegin.setString(2, endDateStr);
            ResultSet rs4 = selectBegin.executeQuery();

            if (rs4.next()) {
                Begin = rs4.getDouble("Begin");
                String formattedTotBegin = formatter.format(Begin);
                this.opStock.setText(String.valueOf(formattedTotBegin));
            }

            selectClose = con.prepareStatement("select SUM(StockAmount) as Close from Stock where CreatedAt >= ? AND CreatedAt <= ?");
            selectClose.setString(1, startDateStr);
            selectClose.setString(2, endDateStr);
            ResultSet rs5 = selectClose.executeQuery();

            if (rs5.next()) {
                Close = rs5.getDouble("Close");
                String formattedTotClose = formatter.format(Close);
                this.clStock.setText("(" + String.valueOf(formattedTotClose) + ")");
            }

            cost = TotPurchase + Begin - Close;
            String formattedCost = formatter.format(cost);
            this.TotCost.setText(String.valueOf(formattedCost));

            grossProfit = revenue - cost;
            String formattedGrossProfit = formatter.format(grossProfit);
            if (grossProfit > 0) {
                this.grossProfit.setText(String.valueOf(formattedGrossProfit));
            } else {
                this.grossProfit.setText(String.valueOf(formattedGrossProfit));
                this.gross.setText("TOTAL GROSS LOSS ");
                this.gross.setForeground(Color.red);
                this.grossProfit.setForeground(Color.red);
            }

            selectExpenses = con.prepareStatement("select SUM(Amount) as TotExpense from Expense where CreatedAt >= ? AND CreatedAt <= ?");
            selectExpenses.setString(1, startDateStr);
            selectExpenses.setString(2, endDateStr);
            ResultSet rs3 = selectExpenses.executeQuery();

            if (rs3.next()) {
                TotExpense = rs3.getDouble("TotExpense");
                String formattedTotExpense = formatter.format(TotExpense);
                this.totExpenses.setText(String.valueOf(formattedTotExpense));
            }

            bal = grossProfit - TotExpense;
            String formattedBal = formatter.format(bal);

            if (bal > 0) {
                this.NetBfr.setText(String.valueOf(formattedBal));
            } else if (bal <= 0) {
                this.net.setForeground(Color.red);
                this.NetBfr.setForeground(Color.red);
                this.net.setText("NET LOSS BEFORE TAX");
                this.NetBfr.setText(String.valueOf(bal));
            }

            selectTax = con.prepareStatement("select SUM(VAT) as TotTax from sales where CreatedAt >= ? AND CreatedAt <= ? and not(Type=?) and not(status=?)");
            selectTax.setString(1, startDateStr);
            selectTax.setString(2, endDateStr);
            selectTax.setString(3,"Credit");
            selectTax.setString(4, "Refunded");
            ResultSet rs6 = selectTax.executeQuery();

            if (rs6.next()) {
                TotTax = rs6.getDouble("TotTax");
                String formattedTax = formatter.format(TotTax);
                this.VAT.setText(String.valueOf(formattedTax));
            }

            all = bal - TotTax;
            String formattedAll = formatter.format(all);

            if (all > 0) {
                this.netAll.setForeground(Color.green);
                this.decision.setForeground(Color.green);
                this.overall1.setForeground(Color.green);
                this.overall1.setText(String.valueOf(formattedAll));
            } else if (all <= 0) {
                this.netAll.setForeground(Color.red);
                this.decision.setForeground(Color.red);
                this.decision.setText("LOSS");
                this.overall1.setForeground(Color.red);
                this.overall1.setText(String.valueOf(formattedAll));
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_searchBetween2searchBetweenActionPerformed

    private void searchBetween2searchBetweenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchBetween2searchBetweenMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_searchBetween2searchBetweenMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        BufferedImage image = new BufferedImage(All.getWidth(), All.getHeight(), BufferedImage.TYPE_INT_RGB);
        Graphics g = image.getGraphics();
        All.paint(g);
        g.dispose();
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a file to save");
        int userSelection = fileChooser.showSaveDialog(null);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            try {
                String filePath = fileToSave.getAbsolutePath();
                if (!filePath.toLowerCase().endsWith(".png")) {
                    filePath += ".png";
                    fileToSave = new File(filePath);
                }
                ImageIO.write(image, "png", fileToSave);
                JOptionPane.showMessageDialog(null, "Profit and Loss Statement saved as PNG file successfully!");
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error saving statement as PNG file: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel All;
    private javax.swing.JLabel NetBfr;
    private javax.swing.JLabel TotCost;
    private javax.swing.JLabel TotRevenue;
    private javax.swing.JLabel TotRevenue1;
    private javax.swing.JLabel VAT;
    private javax.swing.JLabel clStock;
    private javax.swing.JLabel creditors;
    private javax.swing.JLabel decision;
    private javax.swing.JLabel decision1;
    private com.toedter.calendar.JDateChooser endDate2;
    private javax.swing.JLabel frmDate;
    private javax.swing.JLabel from1;
    private javax.swing.JLabel gross;
    private javax.swing.JLabel grossProfit;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JLabel net;
    private javax.swing.JLabel netAll;
    private javax.swing.JLabel netAll1;
    private javax.swing.JLabel opStock;
    private javax.swing.JLabel overall;
    private javax.swing.JLabel overall1;
    private javax.swing.JLabel purchases;
    private javax.swing.JLabel returns;
    private javax.swing.JLabel sales;
    private javax.swing.JButton searchBetween2;
    private com.toedter.calendar.JDateChooser startDate2;
    private javax.swing.JComboBox<String> status2;
    private javax.swing.JLabel to;
    private javax.swing.JLabel toDate;
    private javax.swing.JLabel totExpenses;
    // End of variables declaration//GEN-END:variables
}
