
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Patrick
 */
public class StatementBC extends javax.swing.JPanel {

    JpanelLoaderMain jpload = new JpanelLoaderMain();
    String Met = "Cash";

    /**
     * Creates new form Statement
     */
    public StatementBC() {
        initComponents();
        this.status2.requestFocus();

        table_updates();
        PaymentMethod();

    }

    private void PaymentMethod() {
        try {
            Connection con = Connect.getConnection();

            PreparedStatement Method = con.prepareStatement("SELECT Method FROM Payment WHERE (Method LIKE ?)");
            Method.setString(1, "%bank%");

            ResultSet met = Method.executeQuery();

            List<String> methods = new ArrayList<>();

            while (met.next()) {
                String method = met.getString("Method");
                methods.add(method);
            }

            this.Method.setModel(new DefaultComboBoxModel<>(methods.toArray(new String[0])));

        } catch (SQLException ex) {
            Logger.getLogger(StatementC.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel6 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        status2 = new javax.swing.JComboBox<>();
        jPanel7 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        Export2 = new javax.swing.JButton();
        searchBetween = new javax.swing.JButton();
        startDate = new com.toedter.calendar.JDateChooser();
        endDate = new com.toedter.calendar.JDateChooser();
        jLabel16 = new javax.swing.JLabel();
        totAmount = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        Method = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        CashTxn = new javax.swing.JTable();

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel13.setText("Financial Statement / Cash On Hand Statement");

        jLabel14.setBackground(new java.awt.Color(0, 0, 0));
        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel14.setText("Statement Type");

        status2.setBackground(new java.awt.Color(0, 153, 102));
        status2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        status2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cash On Hand", "Cash At Bank", "Bank", "Profit and Loss" }));
        status2.setSelectedIndex(1);
        status2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                status2statusMouseClicked(evt);
            }
        });
        status2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                status2statusActionPerformed(evt);
            }
        });
        status2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                status2statusKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(status2, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel14)
                        .addComponent(status2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel13))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel15.setText("Date");

        Export2.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        Export2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/share.png"))); // NOI18N
        Export2.setText("Export");
        Export2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export2ExportActionPerformed(evt);
            }
        });

        searchBetween.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        searchBetween.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/loupe.png"))); // NOI18N
        searchBetween.setText("Search");
        searchBetween.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchBetweensearchBetweenMouseClicked(evt);
            }
        });
        searchBetween.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBetweensearchBetweenActionPerformed(evt);
            }
        });

        startDate.setMaximumSize(new java.awt.Dimension(90, 30));

        endDate.setMaximumSize(new java.awt.Dimension(90, 30));

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel16.setText("-");

        totAmount.setEditable(false);
        totAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totAmounttotAmountActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel17.setText("Total:");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("Method");

        Method.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cash", "Bank", "Mobile Money" }));
        Method.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MethodActionPerformed(evt);
            }
        });
        Method.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                MethodKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(endDate, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(searchBetween)
                .addGap(18, 18, 18)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Method, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Export2)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(endDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15)
                            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel17)
                                .addComponent(totAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Export2))
                            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel8)
                                .addComponent(Method, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(searchBetween))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        CashTxn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        CashTxn.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Method of Payment", "Invoice ID", "Customer", "Sale Date", "Release Date", "VAT", "Total Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        CashTxn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CashTxnMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                CashTxnMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(CashTxn);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    PreparedStatement insert, totC, totB, totM;

    public void table_updates() {

        long c = 0, b = 0, m = 0, sum;
        int count;
        try {
            Connection con = Connect.getConnection();

            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            Date now = new Date();
            String today = dateFormat.format(now);

            insert = con.prepareStatement("select * from sales where not(status=?) and not(method=?) and (Method like ?)");
            insert.setString(1, "Refunded");
            insert.setString(2, "");
            insert.setString(3, "%Bank%");
            //insert.setString(3, "");

            ResultSet rs = insert.executeQuery();
            ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
            count = rsmd.getColumnCount();

            DefaultTableModel Df = (DefaultTableModel) CashTxn.getModel();
            Df.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();

                for (int i = 1; i <= count; i++) {
                    if (rs.getString("Type").equals("Paid") && rs.getString("Status").equals("Paid")) {
                        v2.add(rs.getString("Method"));
                        v2.add(rs.getString("InvoiceID"));
                        v2.add(rs.getString("CustomerName"));
                        v2.add(rs.getString("SaleDate"));
                        v2.add(rs.getString("ReleaseDate"));
                        v2.add(rs.getString("VAT"));
                        v2.add(rs.getString("SIN"));
                    } else {

                        v2.add(rs.getString("Method"));
                        v2.add(rs.getString("InvoiceID"));
                        v2.add(rs.getString("CustomerName"));
                        v2.add(rs.getString("SaleDate"));
                        v2.add(rs.getString("ReleaseDate"));
                        v2.add(rs.getString("VAT"));
                        v2.add(rs.getString("TotalAmount"));
                    }
                }

                Df.addRow(v2);
            }

            totC = con.prepareStatement("select sum(TotalAmount) as TotC from sales where not(status=?) and method=? and SaleDate=? AND (method LIKE ?)");
            totC.setString(1, "Refunded");
            totC.setString(2, "Cash");
            totC.setString(3, today);
            totC.setString(4, "%Bank%");

            String amount = null;
            ResultSet rsC = totC.executeQuery();
            if (rsC.next()) {
                amount = rsC.getString("TotC");
            }
            this.totAmount.setText(amount);

        } catch (SQLException ex) {
            java.util.logging.Logger.getLogger(StatementC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

    }

    private void status2statusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_status2statusMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_status2statusMouseClicked

    private void status2statusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_status2statusActionPerformed
        // TODO add your handling code here:

        String Method = this.status2.getSelectedItem().toString();

        switch (Method) {
            case "Cash On Hand": {
                StatementC stC = new StatementC();
                jpload.jPanelLoader(this, stC);
                break;
            }
            case "Cash At Bank": {
                StatementBC stBC = new StatementBC();
                jpload.jPanelLoader(this, stBC);
                break;
            }
            case "Bank": {
                StatementB stB = new StatementB();
                jpload.jPanelLoader(this, stB);
                break;
            }
            case "Profit and Loss": {
                StatementP stP = new StatementP();
                jpload.jPanelLoader(this, stP);
                break;
            }
            default:
                break;
        }

    }//GEN-LAST:event_status2statusActionPerformed

    private void status2statusKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_status2statusKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_status2statusKeyReleased

    private void Export2ExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export2ExportActionPerformed
        // TODO add your handling code here:
        File file = createExcelFile();
        exportToCSV(CashTxn, file);
    }//GEN-LAST:event_Export2ExportActionPerformed

    private static File createExcelFile() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save CSV File");

        FileNameExtensionFilter filter = new FileNameExtensionFilter("CSV files (*.csv)", "csv");
        fileChooser.setFileFilter(filter);

        int userSelection = fileChooser.showSaveDialog(null);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();

            String filePath = fileToSave.getAbsolutePath();
            if (!filePath.toLowerCase().endsWith(".csv")) {
                fileToSave = new File(filePath + ".csv");
            }
            return fileToSave;
        } else {
            return null;
        }
    }

    private static void exportToCSV(JTable table, File file) {
        FileWriter writer = null;
        try {
            writer = new FileWriter(file);

            for (int i = 0; i < table.getColumnCount(); i++) {
                writer.write(table.getColumnName(i));
                if (i < table.getColumnCount() - 1) {
                    writer.write(",");
                }
            }
            writer.write("\n");

            for (int i = 0; i < table.getRowCount(); i++) {
                for (int j = 0; j < table.getColumnCount(); j++) {
                    Object value = table.getValueAt(i, j);
                    writer.write(value.toString());
                    if (j < table.getColumnCount() - 1) {
                        writer.write(",");
                    }
                }
                writer.write("\n");
            }
            writer.close();
            JOptionPane.showMessageDialog(null, "Table exported to CSV file successfully.");
        } catch (IOException ex) {
            Logger.getLogger(SaleM.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                writer.close();
            } catch (IOException ex) {
                Logger.getLogger(SaleM.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }


    private void searchBetweensearchBetweenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchBetweensearchBetweenMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_searchBetweensearchBetweenMouseClicked

    private void searchBetweensearchBetweenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBetweensearchBetweenActionPerformed
        // TODO add your handling code here:

        long c = 0, b = 0, m = 0, sum;
        try {

            Date sd = startDate.getDate();
            Date ed = endDate.getDate();

            if ((sd != null) && (ed == null)) {
                SimpleDateFormat sDate = new SimpleDateFormat("yyyy-MM-dd");
                String date = sDate.format(startDate.getDate());
                DefaultTableModel model = (DefaultTableModel) CashTxn.getModel();
                TableRowSorter tr = new TableRowSorter(model);
                CashTxn.setRowSorter(tr);
                tr.setRowFilter(RowFilter.regexFilter(date.trim(), 3));
            } else if ((sd != null) && (ed != null)) {
                DefaultTableModel model = (DefaultTableModel) CashTxn.getModel();
                TableRowSorter<DefaultTableModel> tr = new TableRowSorter<>(model);
                CashTxn.setRowSorter(tr);

                RowFilter<DefaultTableModel, Integer> dateRangeFilter = new RowFilter<DefaultTableModel, Integer>() {
                    @Override
                    public boolean include(RowFilter.Entry<? extends DefaultTableModel, ? extends Integer> entry) {
                        try {
                            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                            Date startDate = sd;
                            Date endDate = ed;

                            Object value = entry.getModel().getValueAt(entry.getIdentifier(), 3);
                            if (value != null) {
                                Date dateValue = dateFormat.parse(value.toString());
                                return dateValue.compareTo(startDate) >= 0 && dateValue.compareTo(endDate) <= 0;
                            }
                        } catch (ParseException e) {
                            e.printStackTrace();
                        }
                        return false;
                    }
                };

                tr.setRowFilter(dateRangeFilter);
            }

            Connection con = Connect.getConnection();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String startDateStr = sdf.format(startDate.getDate());
            String endDateStr = sdf.format(endDate.getDate());

            totC = con.prepareStatement("select sum(TotalAmount) as TotC from sales where not(status=?) and method=? and SaleDate>=? and SaleDate<=? AND (method LIKE ?)");
            totC.setString(1, "Refunded");
            totC.setString(2, Method.getSelectedItem().toString());
            totC.setString(3, startDateStr);
            totC.setString(4, endDateStr);
            totC.setString(5, "%Bank%");
            
            String amount = null;
            ResultSet rsC = totC.executeQuery();
            if (rsC.next()) {
                amount = rsC.getString("TotC");
            }
            this.totAmount.setText(amount);


            /*
            ResultSet rsC = totC.executeQuery();
            if (rsC.next()) {
            totCash.setText(rsC.getString("TotC"));
            c=rsC.getLong("TotC");
            }
            
            totB = con.prepareStatement("select sum(TotalAmount) as TotB from sales where not(status=?) and method=? and SaleDate>=? and SaleDate<=?");
            totB.setString(1, "Refunded");
            totB.setString(2, "Bank");
            totB.setString(3, startDateStr);
            totB.setString(4, endDateStr);
            
            ResultSet rsB = totB.executeQuery();
            if (rsB.next()) {
            totBank.setText(rsB.getString("TotB"));
            b=rsB.getLong("TotB");
            }
            
            totM = con.prepareStatement("select sum(TotalAmount) as totM from sales where not(status=?) and method=? and SaleDate>=? and SaleDate<=?");
            totM.setString(1, "Refunded");
            totM.setString(2, "Mobile Money");
            totM.setString(3, startDateStr);
            totM.setString(4, endDateStr);
            
            ResultSet rsM = totM.executeQuery();
            if (rsM.next()) {
            totMomo.setText(rsM.getString("totM"));
            m=rsM.getLong("TotM");
            }
            
            sum=c+b+m;
            totAmount.setText(String.valueOf(sum));*/
        } catch (SQLException ex) {
            Logger.getLogger(StatementC.class.getName()).log(Level.SEVERE, null, ex);
        }
        /*
try {

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
String startDateStr = sdf.format(startDate2.getDate());
String endDateStr = sdf.format(endDate2.getDate());

Connection con = Connect.getConnection();
String search = "SELECT * FROM sales WHERE SaleDate >= ? AND SaleDate <= ?";
String search1 = "SELECT SUM(TotalAmount) as Total FROM sales WHERE SaleDate >= ? AND SaleDate <= ?";
PreparedStatement srch1 = con.prepareStatement(search1);
PreparedStatement srch = con.prepareStatement(search);
srch.setString(1, startDateStr);
srch.setString(2, endDateStr);
//   srch.setString(3, Met);
srch1.setString(1, startDateStr);
srch1.setString(2, endDateStr);
//   srch1.setString(3, Met);
ResultSet rs = srch.executeQuery();
ResultSet rs1 = srch1.executeQuery();

if (rs1.next()) {
String tot = rs1.getString("Total");
this.totAmount2.setText(tot);
}

CashTxn.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException ex) {
            java.util.logging.Logger.getLogger(StatementC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
         */
    }//GEN-LAST:event_searchBetweensearchBetweenActionPerformed

    private void totAmounttotAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totAmounttotAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totAmounttotAmountActionPerformed

    private void CashTxnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CashTxnMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_CashTxnMouseClicked

    private void CashTxnMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CashTxnMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_CashTxnMousePressed

    private void MethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MethodActionPerformed

        this.totAmount.setText("");

        try {
            // TODO add your handling code here:
            DefaultTableModel src = (DefaultTableModel) CashTxn.getModel();
            TableRowSorter<DefaultTableModel> obj = new TableRowSorter<>(src);
            CashTxn.setRowSorter(obj);
            obj.setRowFilter(RowFilter.regexFilter(Method.getSelectedItem().toString(), 0));

            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            Date now = new Date();
            String today = dateFormat.format(now);

            Connection con = Connect.getConnection();

            totC = con.prepareStatement("select sum(TotalAmount) as TotC from sales where not(status=?) and method=? and SaleDate>=? and SaleDate<=? and (method LIKE ?)");
            totC.setString(1, "Refunded");
            totC.setString(2, Method.getSelectedItem().toString());
            totC.setString(3, today);
            totC.setString(4, today);
            totC.setString(5, "%Bank%");

            String amount = null;
            ResultSet rsC = totC.executeQuery();
            if (rsC.next()) {
                amount = rsC.getString("TotC");
            }
            totC = con.prepareStatement("select sum(SIN) as TotC from sales where not(status=?) and method=? and SaleDate>=? and SaleDate<=? and (method LIKE ?)");
            totC.setString(1, "Refunded");
            totC.setString(2, Method.getSelectedItem().toString());
            totC.setString(3, today);
            totC.setString(4, today);
            totC.setString(5, "%Bank%");

            String amount1 = null;
            ResultSet rsC1 = totC.executeQuery();
            if (rsC1.next()) {
                amount1 = rsC1.getString("TotC");
            }
            double tot = Double.parseDouble(amount) + Double.parseDouble(amount1);

            this.totAmount.setText(String.valueOf(tot));

        } catch (SQLException ex) {
            Logger.getLogger(StatementC.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_MethodActionPerformed

    private void MethodKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MethodKeyReleased
        // TODO add your handling code here:

        DefaultTableModel src = (DefaultTableModel) CashTxn.getModel();
        TableRowSorter<DefaultTableModel> obj = new TableRowSorter<>(src);
        CashTxn.setRowSorter(obj);
        obj.setRowFilter(RowFilter.regexFilter(Method.getSelectedItem().toString(), 0));
    }//GEN-LAST:event_MethodKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable CashTxn;
    private javax.swing.JButton Export2;
    private javax.swing.JComboBox<String> Method;
    private com.toedter.calendar.JDateChooser endDate;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton searchBetween;
    private com.toedter.calendar.JDateChooser startDate;
    private javax.swing.JComboBox<String> status2;
    private javax.swing.JTextField totAmount;
    // End of variables declaration//GEN-END:variables
}
