
import java.sql.ResultSetMetaData;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Patrick
 */
public class PurchaseM extends javax.swing.JPanel {

    /**
     * Creates new form Purchase
     */
    public PurchaseM() {
        initComponents();
        table_updates();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        Exit = new javax.swing.JButton();
        addNew = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        Invoice = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        search = new javax.swing.JButton();
        startDate = new com.toedter.calendar.JDateChooser();
        endDate = new com.toedter.calendar.JDateChooser();
        jLabel9 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        status = new javax.swing.JComboBox<>();
        Refresh = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        Approve = new javax.swing.JButton();
        EditPurchase = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Purchase Management");

        Exit.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        Exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/close.png"))); // NOI18N
        Exit.setText("Close");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });

        addNew.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        addNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/credit-card-add.png"))); // NOI18N
        addNew.setText("New");
        addNew.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addNewMouseClicked(evt);
            }
        });
        addNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addNew)
                .addGap(18, 18, 18)
                .addComponent(Exit)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(addNew)
                    .addComponent(Exit))
                .addGap(0, 10, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Date");

        Invoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InvoiceActionPerformed(evt);
            }
        });
        Invoice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                InvoiceKeyReleased(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("Status");

        search.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        search.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/loupe.png"))); // NOI18N
        search.setText("Search");
        search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchMouseClicked(evt);
            }
        });
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        startDate.setMaximumSize(new java.awt.Dimension(90, 30));

        endDate.setMaximumSize(new java.awt.Dimension(90, 30));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel9.setText("-");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Invoice");

        status.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Approved", "Waiting Approval" }));
        status.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                statusMouseClicked(evt);
            }
        });
        status.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusActionPerformed(evt);
            }
        });
        status.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                statusKeyReleased(evt);
            }
        });

        Refresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/refresh.png"))); // NOI18N
        Refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(endDate, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Invoice, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(search)
                .addGap(282, 282, 282)
                .addComponent(Refresh)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(endDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel6)
                                        .addComponent(Invoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel8)
                                        .addComponent(search)
                                        .addComponent(jLabel7)
                                        .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Refresh)))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        jTable2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Status", "Invoice ID", "Supplier", "Purchase Date", "Release Date", "Total Amount", "VAT"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setText("Details List");

        Approve.setBackground(new java.awt.Color(0, 102, 51));
        Approve.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        Approve.setForeground(new java.awt.Color(255, 255, 255));
        Approve.setText("Approve");
        Approve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApproveActionPerformed(evt);
            }
        });

        EditPurchase.setBackground(new java.awt.Color(0, 102, 51));
        EditPurchase.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        EditPurchase.setForeground(new java.awt.Color(255, 255, 255));
        EditPurchase.setText("Edit");
        EditPurchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditPurchaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(EditPurchase)
                .addGap(18, 18, 18)
                .addComponent(Approve)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel10)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EditPurchase)
                    .addComponent(Approve))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Item Name", "Qty", "Unit Price", "Purchase Price", "Amount", "VAT"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1179, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1)
                        .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 611, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                    .addContainerGap()))
        );
    }// </editor-fold>//GEN-END:initComponents

    PreparedStatement insert, ref, stock, Current;

    NumberFormat formatter = NumberFormat.getInstance();

    public void table_updates() {

        int count;

        try {

            Connection con = Connect.getConnection();
            insert = con.prepareStatement("select * from purchase");

            ResultSet rs = insert.executeQuery();
            ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
            count = rsmd.getColumnCount();

            DefaultTableModel Df = (DefaultTableModel) jTable2.getModel();
            Df.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();

                for (int i = 1; i <= count; i++) {

                    v2.add(rs.getString("Status"));
                    v2.add(rs.getString("InvoiceID"));
                    v2.add(rs.getString("SupplierName"));
                    v2.add(rs.getDate("createdAt"));
                    v2.add(rs.getString("ReleaseDate"));
                    v2.add(formatter.format(rs.getDouble("TotalAmount")));
                    v2.add(formatter.format(rs.getDouble("VAT")));

                }

                Df.addRow(v2);
            }

        } catch (SQLException ex) {
            java.util.logging.Logger.getLogger(PurchaseM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

    }


    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        // TODO add your handling code here:

        this.setVisible(false);
    }//GEN-LAST:event_ExitActionPerformed

    private void addNewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addNewMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_addNewMouseClicked

    private void addNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewActionPerformed
        // TODO add your handling code here:

        if (!ValidateForm.isInternetReachable()) {
            try {
                Connection con = Connect.getConnection();
                con.close();
                JOptionPane.showMessageDialog(null, "There is no internet Connection!", "Internet Connectivity", JOptionPane.ERROR_MESSAGE);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else {
            int confirm = JOptionPane.showConfirmDialog(null, "Do you want to process the New Purchase?", "Purchase Management", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                new PurchaseRegistration().setVisible(true);
            }
        }
    }//GEN-LAST:event_addNewActionPerformed

    private void InvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InvoiceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InvoiceActionPerformed

    private void InvoiceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_InvoiceKeyReleased
        // TODO add your handling code here:

        DefaultTableModel src = (DefaultTableModel) jTable2.getModel();
        TableRowSorter<DefaultTableModel> obj = new TableRowSorter<>(src);
        jTable2.setRowSorter(obj);
        obj.setRowFilter(RowFilter.regexFilter(Invoice.getText(), 1));
    }//GEN-LAST:event_InvoiceKeyReleased

    private void searchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_searchMouseClicked

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:

        Date sd = startDate.getDate();
        Date ed = endDate.getDate();

        if ((sd != null) && (ed == null)) {
            SimpleDateFormat sDate = new SimpleDateFormat("yyyy-MM-dd");
            String date = sDate.format(startDate.getDate());
            DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
            TableRowSorter tr = new TableRowSorter(model);
            jTable2.setRowSorter(tr);
            tr.setRowFilter(RowFilter.regexFilter(date.trim(), 3));
        } else if ((sd != null) && (ed != null)) {
            DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
            TableRowSorter<DefaultTableModel> tr = new TableRowSorter<>(model);
            jTable2.setRowSorter(tr);

            RowFilter<DefaultTableModel, Integer> dateRangeFilter = new RowFilter<DefaultTableModel, Integer>() {
                @Override
                public boolean include(RowFilter.Entry<? extends DefaultTableModel, ? extends Integer> entry) {
                    try {
                        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                        Date startDate = sd;
                        Date endDate = ed;

                        Object value = entry.getModel().getValueAt(entry.getIdentifier(), 3);
                        if (value != null) {
                            Date dateValue = dateFormat.parse(value.toString());
                            return dateValue.compareTo(startDate) >= 0 && dateValue.compareTo(endDate) <= 0;
                        }
                    } catch (ParseException e) {
                        e.printStackTrace();
                    }
                    return false;
                }
            };

            tr.setRowFilter(dateRangeFilter);
        }

        /*
        try {
        
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String startDateStr = sdf.format(startDate.getDate());
        String endDateStr = sdf.format(endDate.getDate());
        
        Connection con = Connect.getConnection();
        String search = "SELECT * FROM sales WHERE ReleaseDate >= ? AND ReleaseDate <= ?";
        PreparedStatement srch = con.prepareStatement(search);
        srch.setString(1, startDateStr);
        srch.setString(2, endDateStr);
        ResultSet rss = srch.executeQuery();
        jTable2.setModel(DbUtils.resultSetToTableModel(rss));
        } catch (SQLException ex) {
        java.util.logging.Logger.getLogger(PurchaseM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
    }//GEN-LAST:event_searchActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // TODO add your handling code here:

        DefaultTableModel Df = (DefaultTableModel) jTable2.getModel();
        int selectedIndex = jTable2.getSelectedRow();

        String InvoiceID = (Df.getValueAt(selectedIndex, 1).toString());

        int count;

        try {

            Connection con = Connect.getConnection();
            insert = con.prepareStatement("select * from purchaseitem where RefPurchase=?");
            insert.setString(1, InvoiceID);

            ResultSet rs = insert.executeQuery();
            ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
            count = rsmd.getColumnCount();

            DefaultTableModel Df2 = (DefaultTableModel) jTable1.getModel();
            Df2.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();

                for (int i = 1; i <= count; i++) {

                    v2.add(rs.getString("ItemCode"));
                    v2.add(rs.getString("ItemName"));
                    v2.add(rs.getString("PurchaseQty"));
                    v2.add(formatter.format(rs.getDouble("PurchasePrice")));
                    v2.add(formatter.format(rs.getDouble("UnitPrice")));
                    v2.add(formatter.format(rs.getDouble("TotalPrice")));
                    v2.add(formatter.format(rs.getDouble("VAT")));

                }

                Df2.addRow(v2);
            }

        } catch (SQLException ex) {
            java.util.logging.Logger.getLogger(PurchaseM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTable2MouseClicked

    private void ApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApproveActionPerformed
        // TODO add your handling code here:

        if (!ValidateForm.isInternetReachable()) {
            try {
                Connection con = Connect.getConnection();
                con.close();
                JOptionPane.showMessageDialog(null, "There is no internet Connection!", "Internet Connectivity", JOptionPane.ERROR_MESSAGE);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else {
            DefaultTableModel Df = (DefaultTableModel) jTable2.getModel();
            int selectedIndex = jTable2.getSelectedRow();
            int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to approve this sale", "Warning", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                String InvoiceID = (Df.getValueAt(selectedIndex, 1).toString());
                try {
                    String app = "Approved";
                    Connection con = Connect.getConnection();
                    insert = con.prepareStatement("update purchase set status=? where InvoiceID=?");
                    insert.setString(1, app);
                    insert.setString(2, InvoiceID);
                    insert.executeUpdate();

                } catch (SQLException sQLException) {
                }

                table_updates();
            }
        }
    }//GEN-LAST:event_ApproveActionPerformed

    private void statusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_statusMouseClicked
        // TODO add your handling code here:
        DefaultTableModel src = (DefaultTableModel) jTable2.getModel();
        TableRowSorter<DefaultTableModel> obj = new TableRowSorter<>(src);
        jTable2.setRowSorter(obj);
        obj.setRowFilter(RowFilter.regexFilter(status.getSelectedItem().toString(), 0));
    }//GEN-LAST:event_statusMouseClicked

    private void statusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusActionPerformed
        // TODO add your handling code here:
        DefaultTableModel src = (DefaultTableModel) jTable2.getModel();
        TableRowSorter<DefaultTableModel> obj = new TableRowSorter<>(src);
        jTable2.setRowSorter(obj);
        obj.setRowFilter(RowFilter.regexFilter(status.getSelectedItem().toString(), 0));
    }//GEN-LAST:event_statusActionPerformed

    private void statusKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_statusKeyReleased
        // TODO add your handling code here:

        DefaultTableModel src = (DefaultTableModel) jTable2.getModel();
        TableRowSorter<DefaultTableModel> obj = new TableRowSorter<>(src);
        jTable2.setRowSorter(obj);
        obj.setRowFilter(RowFilter.regexFilter(status.getSelectedItem().toString(), 0));
    }//GEN-LAST:event_statusKeyReleased

    private void RefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshActionPerformed
        // TODO add your handling code here:

        table_updates();
    }//GEN-LAST:event_RefreshActionPerformed

    private void EditPurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditPurchaseActionPerformed
        // TODO add your handling code here:

        if (!ValidateForm.isInternetReachable()) {
            try {
                Connection con = Connect.getConnection();
                con.close();
                JOptionPane.showMessageDialog(null, "There is no internet Connection!", "Internet Connectivity", JOptionPane.ERROR_MESSAGE);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else {
            DefaultTableModel Df = (DefaultTableModel) jTable2.getModel();
            int selectedIndex = jTable2.getSelectedRow();

            String status = (Df.getValueAt(selectedIndex, 0).toString());

            if (selectedIndex < 0) {
                JOptionPane.showMessageDialog(null, "Select the Row First", "Invalid Purchase", JOptionPane.ERROR_MESSAGE);
            } else if (status.equals("Approved")) {
                JOptionPane.showMessageDialog(null, "The Purchase is Approved Already, you can't Update.", "Approved Purchase", JOptionPane.ERROR_MESSAGE);
            } else if (status.equals("Waiting Approval")) {
                try {

                    Connection con = Connect.getConnection();

                    new PurchaseRegistrationEdit().setVisible(true);
                    String InvoiceID = (Df.getValueAt(selectedIndex, 1).toString());
                    String Customer = (Df.getValueAt(selectedIndex, 2).toString());
                    String VAT = (Df.getValueAt(selectedIndex, 5).toString());
                    String Total = (Df.getValueAt(selectedIndex, 6).toString());
                    String type = null;
                    String cusID = null;
                    String PurchaseCode = null;
                    String Remark = null;
                    String Method = null;
                    String sdcd = null;
                    String rpt = null;
                    String rsn = null;

                    PreparedStatement sel = con.prepareStatement("Select Type,SupplierID,PurchaseCode,Remark,SupplierSDCD,SupplierReceipt,PurchaseReason,Method from purchase where InvoiceID=?");
                    sel.setString(1, InvoiceID);

                    ResultSet rs = sel.executeQuery();
                    if (rs.next()) {
                        type = rs.getString("Type");
                        cusID = rs.getString("SupplierID");
                        PurchaseCode = rs.getString("PurchaseCode");
                        Remark = rs.getString("Remark");
                        sdcd = rs.getString("SupplierSDCD");
                        rpt = rs.getString("SupplierReceipt");
                        rsn = rs.getString("PurchaseReason");
                        Method = rs.getString("Method");
                    }

                    if (type.equals("Purchase")) {
                        PurchaseRegistrationEdit.Purchase.setSelected(true);
                    } else if (type.equals("Debt")) {
                        PurchaseRegistrationEdit.Purchase.setSelected(false);
                    }

                    PurchaseRegistrationEdit.PurchaseID.setText(InvoiceID);
                    PurchaseRegistrationEdit.SupplierID.setText(cusID);
                    PurchaseRegistrationEdit.SupplierName.setText(Customer);
                    PurchaseRegistrationEdit.ReleaseDate.setDate(new Date());
                    PurchaseRegistrationEdit.TotalAmount.setText(Total);
                    PurchaseRegistrationEdit.VAT.setText(VAT);
                    PurchaseRegistrationEdit.Remark.setText(Remark);
                    PurchaseRegistrationEdit.PurchaseCode.setText(PurchaseCode);
                    PurchaseRegistrationEdit.SupplierSDCD.setText(sdcd);
                    PurchaseRegistrationEdit.SupplierReceipt.setText(rpt);
                    PurchaseRegistrationEdit.PurchaseReason.setText(rsn);
                    PurchaseRegistrationEdit.Method.setSelectedItem(Method);

                } catch (SQLException ex) {
                    java.util.logging.Logger.getLogger(PurchaseM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_EditPurchaseActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Approve;
    private javax.swing.JButton EditPurchase;
    private javax.swing.JButton Exit;
    private javax.swing.JTextField Invoice;
    private javax.swing.JButton Refresh;
    private javax.swing.JButton addNew;
    private com.toedter.calendar.JDateChooser endDate;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JButton search;
    private com.toedter.calendar.JDateChooser startDate;
    private javax.swing.JComboBox<String> status;
    // End of variables declaration//GEN-END:variables
}
