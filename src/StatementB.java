
import java.awt.Desktop;
import java.io.FileWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Patrick
 */
public class StatementB extends javax.swing.JPanel {

    JpanelLoaderMain jpload = new JpanelLoaderMain();
    String Met = "Bank";

    private boolean isNew = false;

    /**
     * Creates new form StatementC
     */
    public StatementB() {
        initComponents();
        this.status2.requestFocus();

        table_update();

        this.Reason.setEditable(false);
        this.Amount.setEditable(false);
        this.GivenBy.setEditable(false);
        this.ReceivedBy.setEditable(false);
        this.TxnId.setEditable(false);
        this.InvoiceNo.setEditable(false);
        this.Bank.setSelectedItem("");
        this.Preview.setText("");

        PaymentMethod();

    }

    private void PaymentMethod() {
        try {
            Connection con = Connect.getConnection();

            PreparedStatement Method = con.prepareStatement("SELECT Method FROM Payment WHERE Method LIKE ?");
            Method.setString(1, "%bank%");

            ResultSet met = Method.executeQuery();
            List<String> methods = new ArrayList<>();

            while (met.next()) {
                String method = met.getString("Method");
                methods.add(method);
            }

            this.Bank.setModel(new DefaultComboBoxModel<>(methods.toArray(new String[0])));
            this.Bank1.setModel(new DefaultComboBoxModel<>(methods.toArray(new String[0])));

        } catch (SQLException ex) {
            Logger.getLogger(StatementC.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel6 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        status2 = new javax.swing.JComboBox<>();
        jPanel8 = new javax.swing.JPanel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        Reason = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        GivenBy = new javax.swing.JTextField();
        ReceivedBy = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        Amount = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        TxnId = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        InvoiceNo = new javax.swing.JTextField();
        Proof = new javax.swing.JButton();
        previewPanel = new javax.swing.JPanel();
        Preview = new javax.swing.JLabel();
        Withdraw = new javax.swing.JRadioButton();
        Deposit = new javax.swing.JRadioButton();
        Bank = new javax.swing.JComboBox<>();
        jPanel12 = new javax.swing.JPanel();
        jLabel43 = new javax.swing.JLabel();
        TxnSrc = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        start = new com.toedter.calendar.JDateChooser();
        end = new com.toedter.calendar.JDateChooser();
        jLabel45 = new javax.swing.JLabel();
        Search = new javax.swing.JButton();
        Bank1 = new javax.swing.JComboBox<>();
        jLabel39 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        BankTxn = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        newPetty1 = new javax.swing.JButton();
        savePetty1 = new javax.swing.JButton();
        Exit1 = new javax.swing.JButton();

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel13.setText("Financial Statement / Bank Statement");

        jLabel14.setBackground(new java.awt.Color(0, 0, 0));
        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel14.setText("Statement Type");

        status2.setBackground(new java.awt.Color(0, 153, 102));
        status2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        status2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cash On Hand", "Bank", "Profit and Loss" }));
        status2.setSelectedIndex(1);
        status2.setToolTipText("");
        status2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                status2statusMouseClicked(evt);
            }
        });
        status2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                status2statusActionPerformed(evt);
            }
        });
        status2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                status2statusKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 468, Short.MAX_VALUE)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(status2, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel14)
                        .addComponent(status2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel13))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel34.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel34.setText("Bank");

        jLabel35.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel35.setText("Reason");

        jLabel36.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel36.setText("Given By");

        jLabel37.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel37.setText("Received By");

        jLabel38.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel38.setText("Amount");

        Amount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                AmountKeyTyped(evt);
            }
        });

        jLabel40.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel40.setText("Method");

        jLabel41.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel41.setText("Txn ID");

        TxnId.setEditable(false);

        jLabel42.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel42.setText("Receipt No.");

        Proof.setBackground(new java.awt.Color(0, 102, 0));
        Proof.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        Proof.setForeground(new java.awt.Color(255, 255, 255));
        Proof.setText("<html> <p>Upload Proof of Payment</br> <span><center>(If Any)</center></span></p> </html>");
        Proof.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProofActionPerformed(evt);
            }
        });

        previewPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Preview.setText("Uknown File Path");
        Preview.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout previewPanelLayout = new javax.swing.GroupLayout(previewPanel);
        previewPanel.setLayout(previewPanelLayout);
        previewPanelLayout.setHorizontalGroup(
            previewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(previewPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Preview, javax.swing.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE)
                .addContainerGap())
        );
        previewPanelLayout.setVerticalGroup(
            previewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(previewPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Preview, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        Withdraw.setText("Withdraw");
        Withdraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WithdrawActionPerformed(evt);
            }
        });

        Deposit.setText("Deposit");
        Deposit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DepositActionPerformed(evt);
            }
        });

        Bank.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel35, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel34, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel36, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel37, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel38, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Reason, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                    .addComponent(GivenBy)
                    .addComponent(ReceivedBy)
                    .addComponent(Amount)
                    .addComponent(Bank, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Proof, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel41, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel42, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel40, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(InvoiceNo, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(TxnId, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(Deposit, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Withdraw)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(previewPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(previewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel34)
                                    .addComponent(Bank, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel35)
                                    .addComponent(Reason, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel36)
                                    .addComponent(GivenBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel37)
                                    .addComponent(ReceivedBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel38)
                                    .addComponent(Amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(Deposit)
                                        .addComponent(Withdraw))
                                    .addComponent(jLabel40))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel41)
                                    .addComponent(TxnId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel42)
                                    .addComponent(InvoiceNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Proof)))
                        .addGap(0, 10, Short.MAX_VALUE))))
        );

        jPanel12.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel43.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel43.setText("Txn ID");

        TxnSrc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxnSrcKeyReleased(evt);
            }
        });

        jLabel44.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel44.setText("<html>\n<p>Starting </br>\n<span>Date</span></p>\n</html>");

        jLabel45.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel45.setText("<html> <p>Ending </br> <span>Date</span></p> </html>");

        Search.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Search.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/loupe.png"))); // NOI18N
        Search.setText("Search");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        Bank1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        Bank1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bank1ActionPerformed(evt);
            }
        });

        jLabel39.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel39.setText("Bank");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(TxnSrc, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                .addGap(76, 76, 76)
                .addComponent(jLabel44, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(start, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jLabel45, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(end, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Search)
                .addGap(40, 40, 40)
                .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Bank1, 0, 107, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel39)
                                .addComponent(Bank1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(Search))
                        .addGap(11, 11, 11))
                    .addComponent(jLabel45)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(end, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(start, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel43)
                                .addComponent(TxnSrc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel44, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        BankTxn.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Description", "Date", "Bank", "IN", "OUT", "Balance", "Invoice No", "Proof of Payment"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        BankTxn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BankTxnMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(BankTxn);

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Bank Management");

        newPetty1.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        newPetty1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/credit-card-add.png"))); // NOI18N
        newPetty1.setText("New");
        newPetty1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newPetty1MouseClicked(evt);
            }
        });
        newPetty1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPetty1ActionPerformed(evt);
            }
        });

        savePetty1.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        savePetty1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/floppy-disk.png"))); // NOI18N
        savePetty1.setText("Save");
        savePetty1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePetty1ActionPerformed(evt);
            }
        });

        Exit1.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        Exit1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/close.png"))); // NOI18N
        Exit1.setText("Clear");
        Exit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Exit1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(newPetty1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(savePetty1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Exit1)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Exit1)
                        .addComponent(savePetty1)
                        .addComponent(newPetty1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    PreparedStatement insert, Bal;

    public final String generateTxnCode() {
        String Code = "";
        try {
            Connection con = Connect.getConnection();
            if (con != null) {
                PreparedStatement statement = con.prepareStatement("SELECT COUNT(TxnId) FROM bank");
                ResultSet result = statement.executeQuery();

                if (result.next()) {
                    int count = result.getInt(1);
                    Code = "TXN X" + (000 + count + 1);
                    this.TxnId.setText(Code);
                }
            }
        } catch (SQLException ex) {
            java.util.logging.Logger.getLogger(StatementB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        return Code;
    }

    NumberFormat formatter = NumberFormat.getInstance();

    private void table_update() {

        int count;

        try {
            Connection con = Connect.getConnection();

            insert = con.prepareStatement("select * from bank");

            ResultSet rs = insert.executeQuery();
            ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
            count = rsmd.getColumnCount();

            DefaultTableModel Df = (DefaultTableModel) BankTxn.getModel();
            Df.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();

                for (int i = 1; i <= count; i++) {

                    v2.add(rs.getString("TxnId"));
                    v2.add(rs.getString("Purpose"));
                    v2.add(rs.getDate("createdAt"));
                    v2.add(rs.getString("Bank"));
                    v2.add(formatter.format(rs.getDouble("BIN")));
                    v2.add(formatter.format(rs.getDouble("BOUT")));
                    v2.add(formatter.format(rs.getDouble("Balance")));
                    v2.add(rs.getString("InvoiceNo"));
                    v2.add(rs.getString("file_path"));

                }

                Df.addRow(v2);
            }

        } catch (SQLException ex) {
            java.util.logging.Logger.getLogger(StatementB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

    }

    private void status2statusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_status2statusMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_status2statusMouseClicked

    private void status2statusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_status2statusActionPerformed
        // TODO add your handling code here:

        String Method = this.status2.getSelectedItem().toString();

        switch (Method) {
            case "Cash On Hand": {
                StatementC stC = new StatementC();
                jpload.jPanelLoader(this, stC);
                break;
            }
            case "Cash At Bank": {
                StatementBC stBC = new StatementBC();
                jpload.jPanelLoader(this, stBC);
                break;
            }
            case "Bank": {
                StatementB stB = new StatementB();
                jpload.jPanelLoader(this, stB);
                break;
            }
            case "Profit and Loss": {
                StatementP stP = new StatementP();
                jpload.jPanelLoader(this, stP);
                break;
            }
            default:
                break;
        }

    }//GEN-LAST:event_status2statusActionPerformed

    private void status2statusKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_status2statusKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_status2statusKeyReleased

    private void AmountKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AmountKeyTyped
        // TODO add your handling code here:

        char c = evt.getKeyChar();

        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_AmountKeyTyped

    private void ProofActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProofActionPerformed
        // TODO add your handling code here:

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Image files", "jpg", "jpeg", "png", "gif", "bmp"));
        fileChooser.setFileFilter(new FileNameExtensionFilter("Text files", "txt"));
        fileChooser.setFileFilter(new FileNameExtensionFilter("PDF files", "pdf"));

        int returnValue = fileChooser.showOpenDialog(null);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();

            if (isImageFile(selectedFile)) {
                displayImage(selectedFile);
            } else if (isTextFile(selectedFile)) {
                displayText(selectedFile);
            } else if (isPDFFile(selectedFile)) {
                openPDF(selectedFile);
            } else {
                JOptionPane.showMessageDialog(null, "Unsupported file format.");
            }
        }
    }//GEN-LAST:event_ProofActionPerformed

    private boolean isImageFile(File file) {
        String name = file.getName().toLowerCase();
        return name.endsWith(".jpg") || name.endsWith(".jpeg") || name.endsWith(".png") || name.endsWith(".gif") || name.endsWith(".bmp");
    }

    private boolean isTextFile(File file) {
        String name = file.getName().toLowerCase();
        return name.endsWith(".txt");
    }

    private boolean isPDFFile(File file) {
        String name = file.getName().toLowerCase();
        return name.endsWith(".pdf");
    }

    private void displayImage(File file) {
        try {
            Desktop.getDesktop().open(file);
            this.Preview.setText(file.getAbsolutePath());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error loading image: " + e.getMessage());
        }
    }

    private void displayText(File file) {
        try {
            Desktop.getDesktop().open(file);
            this.Preview.setText(file.getAbsolutePath());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error Reading Text file: " + e.getMessage());
        }
    }

    private void openPDF(File file) {
        try {
            Desktop.getDesktop().open(file);
            this.Preview.setText(file.getAbsolutePath());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error opening PDF file: " + e.getMessage());
        }
    }


    private void TxnSrcKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxnSrcKeyReleased
        // TODO add your handling code here:

        DefaultTableModel src = (DefaultTableModel) BankTxn.getModel();
        TableRowSorter<DefaultTableModel> obj = new TableRowSorter<>(src);
        BankTxn.setRowSorter(obj);
        obj.setRowFilter(RowFilter.regexFilter(TxnSrc.getText(), 0));
    }//GEN-LAST:event_TxnSrcKeyReleased

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        // TODO add your handling code here:

        try {

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String startDateStr = sdf.format(start.getDate());
            String endDateStr = sdf.format(end.getDate());

            Connection con = Connect.getConnection();
            String search = "SELECT * FROM bank WHERE createdAt >= ? AND createdAt <= ?";
            PreparedStatement srch = con.prepareStatement(search);
            srch.setString(1, startDateStr);
            srch.setString(2, endDateStr);
            ResultSet rss = srch.executeQuery();
            BankTxn.setModel(DbUtils.resultSetToTableModel(rss));
        } catch (SQLException ex) {
            java.util.logging.Logger.getLogger(StatementB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SearchActionPerformed

    private void BankTxnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BankTxnMouseClicked
        // TODO add your handling code here:

        DefaultTableModel Df = (DefaultTableModel) BankTxn.getModel();
        int modelIndex = BankTxn.getSelectedRow();
        int selectedIndex = BankTxn.convertRowIndexToModel(modelIndex);

        String Type = Df.getValueAt(selectedIndex, 4).toString();
        String Type1 = Df.getValueAt(selectedIndex, 5).toString();

        String Bank = (String) Df.getValueAt(selectedIndex, 3);
        this.Bank.setSelectedItem(Bank);

        this.TxnId.setText(Df.getValueAt(selectedIndex, 0).toString());
        this.Reason.setText(Df.getValueAt(selectedIndex, 1).toString());

        PreparedStatement select;

        try {

            String Code = Df.getValueAt(selectedIndex, 0).toString();

            Connection con = Connect.getConnection();

            select = con.prepareStatement("SELECT GivenBy, ReceivedBy from bank WHERE TxnId = ?");
            select.setString(1, Code);

            ResultSet rs = select.executeQuery();

            if (rs.next()) {

                String GivenBy = rs.getString("GivenBy");
                this.GivenBy.setText(GivenBy);

                String ReceivedBy = rs.getString("ReceivedBy");
                this.ReceivedBy.setText(ReceivedBy);
            }

            if (Type1.equals("0")) {
                this.Amount.setText(Df.getValueAt(selectedIndex, 4).toString().replace(",", ""));
                this.Deposit.setSelected(true);
                this.Withdraw.setSelected(false);
            } else if (Type.equals("0")) {
                this.Amount.setText(Df.getValueAt(selectedIndex, 5).toString().replace(",", ""));
                this.Withdraw.setSelected(true);
                this.Deposit.setSelected(false);
            }

            this.InvoiceNo.setText(Df.getValueAt(selectedIndex, 7).toString());
            this.Preview.setText(Df.getValueAt(selectedIndex, 8).toString());

        } catch (SQLException ex) {
            java.util.logging.Logger.getLogger(StatementB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BankTxnMouseClicked

    private void newPetty1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newPetty1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_newPetty1MouseClicked

    private void newPetty1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPetty1ActionPerformed
        // TODO add your handling code here:

        this.Reason.setEditable(true);
        this.Amount.setEditable(true);
        this.GivenBy.setEditable(true);
        this.ReceivedBy.setEditable(true);
        this.TxnId.setEditable(true);
        this.InvoiceNo.setEditable(true);
        this.Preview.setText("Uknown File Path");
        this.Bank.setSelectedIndex(1);

        generateTxnCode();
        isNew = true;
    }//GEN-LAST:event_newPetty1ActionPerformed

    private void savePetty1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePetty1ActionPerformed
        // TODO add your handling code here:
        if (!ValidateForm.isInternetReachable()) {
            try {
                Connection con = Connect.getConnection();
                con.close();
                JOptionPane.showMessageDialog(null, "There is no internet Connection!", "Internet Connectivity", JOptionPane.ERROR_MESSAGE);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else {
            int selectedRow = BankTxn.getSelectedRow();

            if (isNew && selectedRow < 0) {

                String input3 = this.Reason.getText().trim();
                String input4 = this.GivenBy.getText().trim();
                String input5 = this.ReceivedBy.getText().trim();
                String input6 = this.Amount.getText().trim();
                boolean input7 = this.Deposit.isSelected();
                boolean input17 = this.Withdraw.isSelected();
                String input8 = this.TxnId.getText().trim();
                String input9 = this.InvoiceNo.getText().trim();
                if ((input7 == false) && (input17 == false)) {
                    JOptionPane.showMessageDialog(null, "Please Choose the Method used either Deposit or Withdraw.", "Error", JOptionPane.ERROR_MESSAGE);
                } else if (input3.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please Enter the Reason of this Transaction.", "Error", JOptionPane.ERROR_MESSAGE);
                } else if (input4.isEmpty() && (input7 == true)) {
                    JOptionPane.showMessageDialog(null, "Please Enter the Person who Issued the Money.", "Error", JOptionPane.ERROR_MESSAGE);
                } else if ((input17 == true) && input5.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please Enter the Person who Received the Money.", "Error", JOptionPane.ERROR_MESSAGE);
                } else if (input6.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please Enter Transaction Amount.", "Error", JOptionPane.ERROR_MESSAGE);
                } else if (input8.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please Enter Transaction ID.", "Error", JOptionPane.ERROR_MESSAGE);
                } else if (input9.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please Enter Transaction Invoice No", "Error", JOptionPane.ERROR_MESSAGE);
                } else {

                    String Purpose = this.Reason.getText();
                    String GivenBy = this.GivenBy.getText();
                    String ReceivedBy = this.ReceivedBy.getText();
                    String Amount = this.Amount.getText();
                    String TxnId = this.TxnId.getText();
                    String InvoiceNo = this.InvoiceNo.getText();
                    String Path = this.Preview.getText();
                    double bal = 0, IN, OUT;
                    String Bank = this.Bank.getSelectedItem().toString();

                    if (input7 == true) {

                        try {

                            Connection con = Connect.getConnection();

                            insert = con.prepareStatement("insert into bank (BIN,Purpose,GivenBy,ReceivedBy,Bank,TxnId,InvoiceNo,Balance,file_path) values (?,?,?,?,?,?,?,?,?)");

                            insert.setString(1, Amount);
                            insert.setString(2, Purpose);
                            insert.setString(3, GivenBy);
                            insert.setString(4, ReceivedBy);
                            insert.setString(5, Bank);
                            insert.setString(6, TxnId);
                            insert.setString(7, InvoiceNo);
                            insert.setDouble(8, bal);
                            insert.setString(9, Path);

                            insert.executeUpdate();

                            Bal = con.prepareStatement("select SUM(BIN) as BIN, SUM(BOUT) as BOUT from bank where bank=?");
                            Bal.setString(1, Bank);

                            ResultSet rs = Bal.executeQuery();

                            if (rs.next()) {
                                IN = rs.getDouble("BIN");
                                OUT = rs.getDouble("BOUT");
                                bal = IN - OUT;
                            }

                            insert = con.prepareStatement("update bank set Balance=? where TxnId=?");
                            insert.setDouble(1, bal);
                            insert.setString(2, TxnId);

                            insert.executeUpdate();

                            JOptionPane.showMessageDialog(null, "New Bank Transaction Recorded");
                            table_update();

                            this.Reason.setText("");
                            this.GivenBy.setText("");
                            this.ReceivedBy.setText("");
                            this.Amount.setText("");
                            this.TxnId.setText("");
                            this.InvoiceNo.setText("");
                            this.Deposit.setSelected(false);
                            this.Withdraw.setSelected(false);
                            this.Preview.setText("Unknown File Path");
                            this.Reason.requestFocus();
                            generateTxnCode();

                        } catch (SQLException ex) {
                            java.util.logging.Logger.getLogger(StatementB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                        }
                    }

                    if (input17 == true) {

                        try {

                            Connection con = Connect.getConnection();

                            insert = con.prepareStatement("insert into bank (BOUT,Purpose,GivenBy,ReceivedBy,Bank,TxnId,InvoiceNo,Balance,file_path) values (?,?,?,?,?,?,?,?,?)");

                            insert.setString(1, Amount);
                            insert.setString(2, Purpose);
                            insert.setString(3, GivenBy);
                            insert.setString(4, ReceivedBy);
                            insert.setString(5, Bank);
                            insert.setString(6, TxnId);
                            insert.setString(7, InvoiceNo);
                            insert.setDouble(8, bal);
                            insert.setString(9, Path);

                            insert.executeUpdate();

                            Bal = con.prepareStatement("select SUM(BIN) as BIN, SUM(BOUT) as BOUT from bank where Bank=?");
                            Bal.setString(1, Bank);

                            ResultSet rs = Bal.executeQuery();

                            if (rs.next()) {
                                IN = rs.getDouble("BIN");
                                OUT = rs.getDouble("BOUT");
                                bal = IN - OUT;
                            }

                            insert = con.prepareStatement("update bank set Balance=? where TxnId=?");
                            insert.setDouble(1, bal);
                            insert.setString(2, TxnId);

                            insert.executeUpdate();

                            JOptionPane.showMessageDialog(null, "New Bank Transaction Recorded");
                            table_update();

                            this.Deposit.setSelected(false);
                            this.Withdraw.setSelected(false);
                            this.Reason.setText("");
                            this.GivenBy.setText("");
                            this.ReceivedBy.setText("");
                            this.Amount.setText("");
                            this.TxnId.setText("");
                            this.InvoiceNo.setText("");
                            this.Preview.setText("Uknown File Path");
                            this.Reason.requestFocus();
                            generateTxnCode();

                        } catch (SQLException ex) {
                            java.util.logging.Logger.getLogger(StatementB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                        }
                    }
                }
            } else {
                String input3 = this.Reason.getText().trim();
                String input4 = this.GivenBy.getText().trim();
                String input5 = this.ReceivedBy.getText().trim();
                String input6 = this.Amount.getText().trim();
                boolean input7 = this.Deposit.isSelected();
                boolean input17 = this.Withdraw.isSelected();
                String input8 = this.TxnId.getText().trim();
                String input9 = this.InvoiceNo.getText().trim();
                if ((input7 == false) && (input17 == false)) {
                    JOptionPane.showMessageDialog(null, "Please Choose the Method used either Deposit or Withdraw.", "Error", JOptionPane.ERROR_MESSAGE);
                } else if (input3.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please Enter the Reason of this Transaction.", "Error", JOptionPane.ERROR_MESSAGE);
                } else if (input4.isEmpty() && (input7 == true)) {
                    JOptionPane.showMessageDialog(null, "Please Enter the Person who Issued the Money.", "Error", JOptionPane.ERROR_MESSAGE);
                } else if ((input17 == true) && input5.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please Enter the Person who Received the Money.", "Error", JOptionPane.ERROR_MESSAGE);
                } else if (input6.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please Enter Transaction Amount.", "Error", JOptionPane.ERROR_MESSAGE);
                } else if (input8.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please Enter Transaction ID.", "Error", JOptionPane.ERROR_MESSAGE);
                } else if (input9.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please Enter Transaction Invoice No", "Error", JOptionPane.ERROR_MESSAGE);
                } else {

                    String Purpose = this.Reason.getText();
                    String GivenBy = this.GivenBy.getText();
                    String ReceivedBy = this.ReceivedBy.getText();
                    String Amount = this.Amount.getText();
                    String TxnId = this.TxnId.getText();
                    String InvoiceNo = this.InvoiceNo.getText();
                    String Path = this.Preview.getText();
                    double bal = 0, IN, OUT;
                    String Bank = this.Bank.getSelectedItem().toString();

                    if (TxnId.contains("TXN X")) {

                        if (input7 == true) {

                            try {

                                Connection con = Connect.getConnection();

                                insert = con.prepareStatement("update bank set BIN=?,Purpose=?,GivenBy=?,ReceivedBy=?,Bank=?,InvoiceNo=?,file_path=? where TxnId=?");

                                insert.setString(1, Amount);
                                insert.setString(2, Purpose);
                                insert.setString(3, GivenBy);
                                insert.setString(4, ReceivedBy);
                                insert.setString(5, Bank);
                                insert.setString(6, InvoiceNo);
                                insert.setString(7, Path);
                                insert.setString(8, TxnId);

                                insert.executeUpdate();

                                Bal = con.prepareStatement("select SUM(BIN) as BIN, SUM(BOUT) as BOUT from bank where Bank=?");
                                Bal.setString(1, Bank);

                                ResultSet rs = Bal.executeQuery();

                                if (rs.next()) {
                                    IN = rs.getDouble("BIN");
                                    OUT = rs.getDouble("BOUT");
                                    bal = IN - OUT;
                                }

                                insert = con.prepareStatement("update bank set Balance=? where TxnId=?");
                                insert.setDouble(1, bal);
                                insert.setString(2, TxnId);

                                insert.executeUpdate();

                                JOptionPane.showMessageDialog(null, "Bank Transaction Updated!");
                                table_update();

                                this.Withdraw.setSelected(false);
                                this.Deposit.setSelected(false);
                                this.Reason.setText("");
                                this.GivenBy.setText("");
                                this.ReceivedBy.setText("");
                                this.Amount.setText("");
                                this.TxnId.setText("");
                                this.InvoiceNo.setText("");
                                this.Preview.setText("Unknown File Path");
                                this.Reason.requestFocus();
                                generateTxnCode();

                            } catch (SQLException ex) {
                                java.util.logging.Logger.getLogger(StatementB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                            }
                        }
                        if (input17 == true) {
                            try {

                                Connection con = Connect.getConnection();

                                insert = con.prepareStatement("update bank set BOUT=?,Purpose=?,GivenBy=?,ReceivedBy=?,Bank=?,InvoiceNo=?,file_path=? where TxnId=?");

                                insert.setString(1, Amount);
                                insert.setString(2, Purpose);
                                insert.setString(3, GivenBy);
                                insert.setString(4, ReceivedBy);
                                insert.setString(5, Bank);
                                insert.setString(6, InvoiceNo);
                                insert.setString(7, Path);
                                insert.setString(8, TxnId);

                                insert.executeUpdate();

                                Bal = con.prepareStatement("select SUM(BIN) as BIN, SUM(BOUT) as BOUT from bank where Bank=?");
                                Bal.setString(1, Bank);

                                ResultSet rs = Bal.executeQuery();

                                if (rs.next()) {
                                    IN = rs.getDouble("BIN");
                                    OUT = rs.getDouble("BOUT");
                                    bal = IN - OUT;
                                }

                                insert = con.prepareStatement("update bank set Balance=? where TxnId=?");
                                insert.setDouble(1, bal);
                                insert.setString(2, TxnId);

                                insert.executeUpdate();

                                JOptionPane.showMessageDialog(null, "Bank Transaction Updated!");
                                table_update();

                                this.Withdraw.setSelected(false);
                                this.Deposit.setSelected(false);
                                this.Reason.setText("");
                                this.GivenBy.setText("");
                                this.ReceivedBy.setText("");
                                this.Amount.setText("");
                                this.TxnId.setText("");
                                this.InvoiceNo.setText("");
                                this.Preview.setText("Unknown File Path");
                                this.Reason.requestFocus();
                                generateTxnCode();

                            } catch (SQLException ex) {
                                java.util.logging.Logger.getLogger(StatementB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_savePetty1ActionPerformed

    private void Exit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Exit1ActionPerformed
        // TODO add your handling code here:

        this.Reason.setText("");
        this.Amount.setText("");
        this.GivenBy.setText("");
        this.ReceivedBy.setText("");
        this.TxnId.setText("");
        this.InvoiceNo.setText("");
        this.Preview.setText("");

        generateTxnCode();

    }//GEN-LAST:event_Exit1ActionPerformed

    private void WithdrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WithdrawActionPerformed
        // TODO add your handling code here:
        if (evt.getSource() == this.Withdraw) {
            this.Deposit.setSelected(false);
            this.Withdraw.setSelected(true);
        }
    }//GEN-LAST:event_WithdrawActionPerformed

    private void DepositActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DepositActionPerformed
        // TODO add your handling code here:
        if (evt.getSource() == this.Deposit) {
            this.Deposit.setSelected(true);
            this.Withdraw.setSelected(false);
        }
    }//GEN-LAST:event_DepositActionPerformed

    private void Bank1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bank1ActionPerformed
        // TODO add your handling code here:

        DefaultTableModel src = (DefaultTableModel) BankTxn.getModel();
        TableRowSorter<DefaultTableModel> obj = new TableRowSorter<>(src);
        BankTxn.setRowSorter(obj);
        obj.setRowFilter(RowFilter.regexFilter(Bank1.getSelectedItem().toString(), 3));

    }//GEN-LAST:event_Bank1ActionPerformed

    private static File createExcelFile() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save CSV File");

        FileNameExtensionFilter filter = new FileNameExtensionFilter("CSV files (*.csv)", "csv");
        fileChooser.setFileFilter(filter);

        int userSelection = fileChooser.showSaveDialog(null);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();

            String filePath = fileToSave.getAbsolutePath();
            if (!filePath.toLowerCase().endsWith(".csv")) {
                fileToSave = new File(filePath + ".csv");
            }
            return fileToSave;
        } else {
            return null;
        }
    }

    private static void exportToCSV(JTable table, File file) {
        FileWriter writer = null;
        try {
            writer = new FileWriter(file);

            for (int i = 0; i < table.getColumnCount(); i++) {
                writer.write(table.getColumnName(i));
                if (i < table.getColumnCount() - 1) {
                    writer.write(",");
                }
            }
            writer.write("\n");

            for (int i = 0; i < table.getRowCount(); i++) {
                for (int j = 0; j < table.getColumnCount(); j++) {
                    Object value = table.getValueAt(i, j);
                    writer.write(value.toString());
                    if (j < table.getColumnCount() - 1) {
                        writer.write(",");
                    }
                }
                writer.write("\n");
            }
            writer.close();
            JOptionPane.showMessageDialog(null, "Table exported to CSV file successfully.");
        } catch (IOException ex) {
            Logger.getLogger(SaleM.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                writer.close();
            } catch (IOException ex) {
                Logger.getLogger(SaleM.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Amount;
    private javax.swing.JComboBox<String> Bank;
    private javax.swing.JComboBox<String> Bank1;
    private javax.swing.JTable BankTxn;
    private javax.swing.JRadioButton Deposit;
    private javax.swing.JButton Exit1;
    private javax.swing.JTextField GivenBy;
    private javax.swing.JTextField InvoiceNo;
    private javax.swing.JLabel Preview;
    private javax.swing.JButton Proof;
    private javax.swing.JTextField Reason;
    private javax.swing.JTextField ReceivedBy;
    private javax.swing.JButton Search;
    private javax.swing.JTextField TxnId;
    private javax.swing.JTextField TxnSrc;
    private javax.swing.JRadioButton Withdraw;
    private com.toedter.calendar.JDateChooser end;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newPetty1;
    private javax.swing.JPanel previewPanel;
    private javax.swing.JButton savePetty1;
    private com.toedter.calendar.JDateChooser start;
    private javax.swing.JComboBox<String> status2;
    // End of variables declaration//GEN-END:variables
}
