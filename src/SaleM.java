
import java.awt.GridLayout;
import java.io.File;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Paragraph;
import com.toedter.calendar.JDateChooser;

import java.io.FileWriter;
import java.io.IOException;
import java.sql.ResultSetMetaData;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Vector;
import javax.swing.RowFilter;
import javax.swing.table.TableRowSorter;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Patrick
 */
public class SaleM extends javax.swing.JPanel {

    NumberFormat formatter = NumberFormat.getInstance();

    /**
     * Creates new form Sale
     */
    public SaleM() {
        initComponents();
        table_updates();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        totVAT = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        totAmount = new javax.swing.JTextField();
        Exit = new javax.swing.JButton();
        addNew = new javax.swing.JButton();
        Refresh = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        Invoice = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        Export = new javax.swing.JButton();
        status = new javax.swing.JComboBox<>();
        searchBetween = new javax.swing.JButton();
        startDate = new com.toedter.calendar.JDateChooser();
        endDate = new com.toedter.calendar.JDateChooser();
        jLabel9 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        ZReport = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        Approve = new javax.swing.JButton();
        EditSale = new javax.swing.JButton();
        Refund = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Sales Management");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Tot.VAT:");

        totVAT.setEditable(false);
        totVAT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totVATActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Total:");

        totAmount.setEditable(false);
        totAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totAmountActionPerformed(evt);
            }
        });

        Exit.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        Exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/close.png"))); // NOI18N
        Exit.setText("Close");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });

        addNew.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        addNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/credit-card-add.png"))); // NOI18N
        addNew.setText("New");
        addNew.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addNewMouseClicked(evt);
            }
        });
        addNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewActionPerformed(evt);
            }
        });

        Refresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/refresh.png"))); // NOI18N
        Refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totVAT, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addNew)
                .addGap(18, 18, 18)
                .addComponent(Exit)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jLabel4)
                        .addComponent(totVAT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)
                        .addComponent(totAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(addNew)
                        .addComponent(Exit))
                    .addComponent(Refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(0, 8, Short.MAX_VALUE))
        );

        jTable2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Status", "Type", "Invoice ID", "Customer", "Sale Date", "Release Date", "Total Amount", "VAT", "Remark"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable2MousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Date");

        Invoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InvoiceActionPerformed(evt);
            }
        });
        Invoice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                InvoiceKeyReleased(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("Status");

        Export.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        Export.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/share.png"))); // NOI18N
        Export.setText("Export");
        Export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportActionPerformed(evt);
            }
        });

        status.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Approved", "Waiting Approval", "Refunded" }));
        status.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                statusMouseClicked(evt);
            }
        });
        status.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusActionPerformed(evt);
            }
        });
        status.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                statusKeyReleased(evt);
            }
        });

        searchBetween.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        searchBetween.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/loupe.png"))); // NOI18N
        searchBetween.setText("Search");
        searchBetween.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchBetweenMouseClicked(evt);
            }
        });
        searchBetween.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBetweenActionPerformed(evt);
            }
        });

        startDate.setMaximumSize(new java.awt.Dimension(90, 30));
        startDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                startDateFocusGained(evt);
            }
        });
        startDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startDateMouseClicked(evt);
            }
        });
        startDate.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                startDateInputMethodTextChanged(evt);
            }
        });
        startDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                startDateKeyReleased(evt);
            }
        });

        endDate.setMaximumSize(new java.awt.Dimension(90, 30));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel9.setText("-");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Invoice");

        ZReport.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        ZReport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/document.png"))); // NOI18N
        ZReport.setText("Z Report");
        ZReport.setMaximumSize(new java.awt.Dimension(92, 27));
        ZReport.setMinimumSize(new java.awt.Dimension(92, 27));
        ZReport.setPreferredSize(new java.awt.Dimension(92, 27));
        ZReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(endDate, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Invoice, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchBetween)
                .addGap(95, 95, 95)
                .addComponent(ZReport, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Export)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(endDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel6)
                                .addComponent(Invoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8)
                                .addComponent(Export)
                                .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(searchBetween)
                                .addComponent(jLabel7)
                                .addComponent(ZReport, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setText("Details List");

        Approve.setBackground(new java.awt.Color(0, 102, 51));
        Approve.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        Approve.setForeground(new java.awt.Color(255, 255, 255));
        Approve.setText("Approve");
        Approve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApproveActionPerformed(evt);
            }
        });

        EditSale.setBackground(new java.awt.Color(0, 102, 51));
        EditSale.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        EditSale.setForeground(new java.awt.Color(255, 255, 255));
        EditSale.setText("Edit");
        EditSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditSaleActionPerformed(evt);
            }
        });

        Refund.setBackground(new java.awt.Color(0, 102, 51));
        Refund.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        Refund.setForeground(new java.awt.Color(255, 255, 255));
        Refund.setText("Refund");
        Refund.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefundActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Refund)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(EditSale)
                .addGap(18, 18, 18)
                .addComponent(Approve)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(Approve)
                    .addComponent(EditSale)
                    .addComponent(Refund))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Item Name", "Qty", "Measurement", "Unit Price", "Total Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1152, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1))
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 709, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
                    .addContainerGap()))
        );
    }// </editor-fold>//GEN-END:initComponents

    PreparedStatement insert, tot, stock, Current, totC, MetBank, Bal;

    public void table_updates() {

        int count;

        try {
            Connection con = Connect.getConnection();
            insert = con.prepareStatement("select * from sales");

            ResultSet rs = insert.executeQuery();
            ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
            count = rsmd.getColumnCount();

            tot = con.prepareStatement("select sum(TotalAmount) as Total, sum(VAT) as VAT from sales where not(status=?)");
            tot.setString(1, "Refunded");

            ResultSet total = tot.executeQuery();

            if (total.next()) {
                totVAT.setText(total.getString("VAT"));
            }

            totC = con.prepareStatement("select sum(TotalAmount) as TotC from sales where not(status=?)");
            totC.setString(1, "Refunded");

            double amount = 0;
            ResultSet rsC = totC.executeQuery();
            if (rsC.next()) {
                amount = rsC.getDouble("TotC");
            }

            totC = con.prepareStatement("select sum(SIN) as SIN from sales where (Type=?)");
            totC.setString(1, "Paid");

            double SIN = 0;
            ResultSet rsCC = totC.executeQuery();
            if (rsCC.next()) {
                SIN = rsCC.getDouble("SIN");
            }

            double totA = SIN + amount;
            this.totAmount.setText(String.valueOf(totA));

            DefaultTableModel Df = (DefaultTableModel) jTable2.getModel();
            Df.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();

                for (int i = 1; i <= count; i++) {
                    if (rs.getString("Type").equals("Sale")) {
                        v2.add(rs.getString("Status"));
                        v2.add(rs.getString("Type"));
                        v2.add(rs.getString("InvoiceID"));
                        v2.add(rs.getString("CustomerName"));
                        v2.add(rs.getString("SaleDate"));
                        v2.add(rs.getString("ReleaseDate"));
                        v2.add(formatter.format(rs.getDouble("TotalAmount")));
                        v2.add(formatter.format(rs.getDouble("VAT")));
                        v2.add(rs.getString("Remark"));

                    } else if (rs.getString("Type").equals("Paid")) {
                        v2.add(rs.getString("Status"));
                        v2.add(rs.getString("Type"));
                        v2.add(rs.getString("InvoiceID"));
                        v2.add(rs.getString("CustomerName"));
                        v2.add(rs.getString("SaleDate"));
                        v2.add(rs.getString("ReleaseDate"));
                        v2.add(formatter.format(rs.getDouble("SIN")));
                        v2.add(formatter.format(rs.getDouble("VAT")));
                        v2.add(rs.getString("Remark"));

                    } else {
                        v2.add(rs.getString("Status"));
                        v2.add("Credit");
                        v2.add(rs.getString("InvoiceID"));
                        v2.add(rs.getString("CustomerName"));
                        v2.add(rs.getString("SaleDate"));
                        v2.add(rs.getString("ReleaseDate"));
                        v2.add(formatter.format(rs.getDouble("Balance")));
                        v2.add(formatter.format(rs.getDouble("VAT")));
                        v2.add(rs.getString("Remark"));

                    }
                }

                Df.addRow(v2);
            }

        } catch (SQLException ex) {
            java.util.logging.Logger.getLogger(SaleM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

    }

    private void totVATActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totVATActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totVATActionPerformed

    private void totAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totAmountActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        // TODO add your handling code here:

        this.setVisible(false);
    }//GEN-LAST:event_ExitActionPerformed

    private void addNewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addNewMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_addNewMouseClicked

    private void addNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewActionPerformed
        // TODO add your handling code here:
        if (!ValidateForm.isInternetReachable()) {
            try {
                Connection con = Connect.getConnection();
                con.close();
                JOptionPane.showMessageDialog(null, "There is no internet Connection!", "Internet Connectivity", JOptionPane.ERROR_MESSAGE);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else {

            int confirm = JOptionPane.showConfirmDialog(null, "Do you want to proceed to New Invoice?", "Sales Management", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                new SalesTransaction().setVisible(true);
            }
        }
    }//GEN-LAST:event_addNewActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // TODO add your handling code here:

        DefaultTableModel Df = (DefaultTableModel) jTable2.getModel();
        int selectedIndex = jTable2.getSelectedRow();
        int modelIndex = jTable2.convertRowIndexToModel(selectedIndex);

        String InvoiceID = (Df.getValueAt(modelIndex, 2).toString());

        //   totVAT.setText((Df.getValueAt(selectedIndex, 6).toString()));
        //   totAmount.setText((Df.getValueAt(selectedIndex, 5).toString()));
        int count;

        try {
            Connection con = Connect.getConnection();
            insert = con.prepareStatement("select * from salesitem where RefSale=?");
            insert.setString(1, InvoiceID);

            ResultSet rs = insert.executeQuery();
            ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
            count = rsmd.getColumnCount();

            DefaultTableModel Df2 = (DefaultTableModel) jTable1.getModel();
            Df2.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();

                for (int i = 1; i <= count; i++) {

                    v2.add(rs.getString("ItemCode"));
                    v2.add(rs.getString("ItemName"));
                    v2.add(rs.getString("SalesQty"));
                    v2.add(rs.getString("Measurement"));
                    v2.add(formatter.format(rs.getDouble("UnitPrice")));
                    v2.add(formatter.format(rs.getDouble("TotalPrice")));
                    v2.add(formatter.format(rs.getDouble("vAT")));

                }

                Df2.addRow(v2);
            }

        } catch (SQLException ex) {
            java.util.logging.Logger.getLogger(SaleM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTable2MouseClicked

    private void InvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InvoiceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InvoiceActionPerformed

    private void InvoiceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_InvoiceKeyReleased
        // TODO add your handling code here:

        DefaultTableModel src = (DefaultTableModel) jTable2.getModel();
        TableRowSorter<DefaultTableModel> obj = new TableRowSorter<>(src);
        jTable2.setRowSorter(obj);
        obj.setRowFilter(RowFilter.regexFilter(Invoice.getText(), 2));
    }//GEN-LAST:event_InvoiceKeyReleased


    private void ExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportActionPerformed
        // TODO add your handling code here:
        File file = createExcelFile();
        exportToCSV(jTable2, file);
    }//GEN-LAST:event_ExportActionPerformed

    private static File createExcelFile() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save CSV File");

        FileNameExtensionFilter filter = new FileNameExtensionFilter("CSV files (*.csv)", "csv");
        fileChooser.setFileFilter(filter);

        int userSelection = fileChooser.showSaveDialog(null);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();

            String filePath = fileToSave.getAbsolutePath();
            if (!filePath.toLowerCase().endsWith(".csv")) {
                fileToSave = new File(filePath + ".csv");
            }
            return fileToSave;
        } else {
            return null;
        }
    }

    private static void exportToCSV(JTable table, File file) {
        FileWriter writer = null;
        try {
            writer = new FileWriter(file);

            for (int i = 0; i < table.getColumnCount(); i++) {
                writer.write(table.getColumnName(i));
                if (i < table.getColumnCount() - 1) {
                    writer.write(",");
                }
            }
            writer.write("\n");

            for (int i = 0; i < table.getRowCount(); i++) {
                for (int j = 0; j < table.getColumnCount(); j++) {
                    Object value = table.getValueAt(i, j);
                    if (value != null) {
                        if (value.toString().contains(",")) {
                            writer.write(value.toString().replace(',', ' '));
                        } else {
                            writer.write(value.toString());
                        }
                    }
                    if (j < table.getColumnCount() - 1) {
                        writer.write(",");
                    }
                }
                writer.write("\n");
            }
            writer.close();
            JOptionPane.showMessageDialog(null, "Table exported to CSV file successfully.");
        } catch (IOException ex) {
            Logger.getLogger(SaleM.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                writer.close();
            } catch (IOException ex) {
                Logger.getLogger(SaleM.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }


    private void statusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusActionPerformed
        // TODO add your handling code here:
        DefaultTableModel src = (DefaultTableModel) jTable2.getModel();
        TableRowSorter<DefaultTableModel> obj = new TableRowSorter<>(src);
        jTable2.setRowSorter(obj);
        obj.setRowFilter(RowFilter.regexFilter(status.getSelectedItem().toString(), 0));
    }//GEN-LAST:event_statusActionPerformed

    private void statusKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_statusKeyReleased
        // TODO add your handling code here:

        DefaultTableModel src = (DefaultTableModel) jTable2.getModel();
        TableRowSorter<DefaultTableModel> obj = new TableRowSorter<>(src);
        jTable2.setRowSorter(obj);
        obj.setRowFilter(RowFilter.regexFilter(status.getSelectedItem().toString(), 0));
    }//GEN-LAST:event_statusKeyReleased

    private void searchBetweenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchBetweenMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_searchBetweenMouseClicked

    private void searchBetweenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBetweenActionPerformed
        try {
            // TODO add your handling code here:

            Date sd = startDate.getDate();
            Date ed = endDate.getDate();

            if ((sd != null) && (ed == null)) {
                SimpleDateFormat sDate = new SimpleDateFormat("yyyy-MM-dd");
                String date = sDate.format(startDate.getDate());
                DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
                TableRowSorter tr = new TableRowSorter(model);
                jTable2.setRowSorter(tr);
                tr.setRowFilter(RowFilter.regexFilter(date.trim(), 4));
            } else if ((sd != null) && (ed != null)) {
                DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
                TableRowSorter<DefaultTableModel> tr = new TableRowSorter<>(model);
                jTable2.setRowSorter(tr);

                RowFilter<DefaultTableModel, Integer> dateRangeFilter = new RowFilter<DefaultTableModel, Integer>() {
                    @Override
                    public boolean include(Entry<? extends DefaultTableModel, ? extends Integer> entry) {
                        try {
                            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                            Date startDate = sd;
                            Date endDate = ed;

                            Object value = entry.getModel().getValueAt(entry.getIdentifier(), 4);
                            if (value != null) {
                                Date dateValue = dateFormat.parse(value.toString());
                                return dateValue.compareTo(startDate) >= 0 && dateValue.compareTo(endDate) <= 0;
                            }
                        } catch (ParseException e) {
                            e.printStackTrace();
                        }
                        return false;
                    }
                };

                tr.setRowFilter(dateRangeFilter);
            }

            Connection con = Connect.getConnection();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String startDateStr = sdf.format(startDate.getDate());
            String endDateStr = sdf.format(endDate.getDate());

            tot = con.prepareStatement("select sum(TotalAmount) as Total, sum(VAT) as VAT from sales where SaleDate>=? and SaleDate<=? and not(status=?)");
            tot.setString(1, startDateStr);
            tot.setString(2, endDateStr);
            tot.setString(3, "Refunded");
            ResultSet total = tot.executeQuery();

            if (total.next()) {
                totVAT.setText(total.getString("VAT"));
            }

            totC = con.prepareStatement("select sum(TotalAmount) as TotC from sales where not(status=?) and SaleDate>=? and SaleDate<=?");
            totC.setString(1, "Refunded");
            totC.setString(2, startDateStr);
            totC.setString(3, endDateStr);

            double amount = 0;
            ResultSet rsC = totC.executeQuery();
            if (rsC.next()) {
                amount = rsC.getDouble("TotC");
            }

            totC = con.prepareStatement("select sum(SIN) as SIN from sales where (Type=?) and SaleDate>=? and SaleDate<=?");
            totC.setString(1, "Paid");
            totC.setString(2, startDateStr);
            totC.setString(3, endDateStr);

            double SIN = 0;
            ResultSet rsCC = totC.executeQuery();
            if (rsCC.next()) {
                SIN = rsCC.getDouble("SIN");
            }

            double totA = SIN + amount;
            this.totAmount.setText(String.valueOf(totA));

            /*
            try {
            
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String startDateStr = sdf.format(startDate.getDate());
            String endDateStr = sdf.format(endDate.getDate());
            
            Connection con = Connect.getConnection();
            String search = "SELECT * FROM sales WHERE SaleDate >= ? AND SaleDate <= ?";
            PreparedStatement srch = con.prepareStatement(search);
            srch.setString(1, startDateStr);
            srch.setString(2, endDateStr);
            ResultSet rs = srch.executeQuery();
            
            jTable2.setModel(DbUtils.resultSetToTableModel(rs));
            } catch (SQLException ex) {
            java.util.logging.Logger.getLogger(SaleM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }*/
        } catch (SQLException ex) {
            Logger.getLogger(SaleM.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchBetweenActionPerformed

    private void ApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApproveActionPerformed
        // TODO add your handling code here:

        if (!ValidateForm.isInternetReachable()) {
            try {
                Connection con = Connect.getConnection();
                con.close();
                JOptionPane.showMessageDialog(null, "There is no internet Connection!", "Internet Connectivity", JOptionPane.ERROR_MESSAGE);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else {
            DefaultTableModel Df = (DefaultTableModel) jTable2.getModel();
            int selectedIndex = jTable2.getSelectedRow();
            int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to approve this sale", "Warning", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                String InvoiceID = (Df.getValueAt(selectedIndex, 2).toString());
                String Status = (Df.getValueAt(selectedIndex, 0).toString());
                if (Status.equals("Waiting Approval")) {
                    try {
                        String app = "Approved";
                        Connection con = Connect.getConnection();
                        insert = con.prepareStatement("update sales set status=? where InvoiceID=?");
                        insert.setString(1, app);
                        insert.setString(2, InvoiceID);
                        insert.executeUpdate();

                    } catch (SQLException sQLException) {
                    }
                    table_updates();
                } else {
                    JOptionPane.showMessageDialog(null, "The Sale is Already Approved");
                }
            }
        }
    }//GEN-LAST:event_ApproveActionPerformed

    private void statusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_statusMouseClicked
        // TODO add your handling code here:
        DefaultTableModel src = (DefaultTableModel) jTable2.getModel();
        TableRowSorter<DefaultTableModel> obj = new TableRowSorter<>(src);
        jTable2.setRowSorter(obj);
        obj.setRowFilter(RowFilter.regexFilter(status.getSelectedItem().toString(), 0));
    }//GEN-LAST:event_statusMouseClicked

    private void RefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshActionPerformed
        // TODO add your handling code here:

        table_updates();
    }//GEN-LAST:event_RefreshActionPerformed

    private void jTable2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable2MousePressed

    private void EditSaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditSaleActionPerformed
        // TODO add your handling code here:

        if (!ValidateForm.isInternetReachable()) {
            try {
                Connection con = Connect.getConnection();
                con.close();
                JOptionPane.showMessageDialog(null, "There is no internet Connection!", "Internet Connectivity", JOptionPane.ERROR_MESSAGE);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else {
            DefaultTableModel Df = (DefaultTableModel) jTable2.getModel();
            int selectedIndex = jTable2.getSelectedRow();

            String status = (Df.getValueAt(selectedIndex, 0).toString());

            if (selectedIndex < 0) {
                JOptionPane.showMessageDialog(null, "Select the Row First", "Invalid Sale", JOptionPane.ERROR_MESSAGE);
            } else if (status.equals("Approved")) {
                JOptionPane.showMessageDialog(null, "The Sale is Approved Already, you can't Update.", "Approved Sale", JOptionPane.ERROR_MESSAGE);
            } else if (status.equals("Refunded")) {
                JOptionPane.showMessageDialog(null, "The Sale is Refunded Already, you can't Update.", "Approved Sale", JOptionPane.ERROR_MESSAGE);
            } else if (status.equals("Waiting Approval")) {
                try {

                    Connection con = Connect.getConnection();

                    new SalesTransactionEdit().setVisible(true);
                    String InvoiceID = (Df.getValueAt(selectedIndex, 2).toString());
                    String Customer = (Df.getValueAt(selectedIndex, 3).toString());
                    String VAT = (Df.getValueAt(selectedIndex, 7).toString());
                    String Total = (Df.getValueAt(selectedIndex, 6).toString());
                    String type = null;
                    String cusID = null;
                    String PurchaseCode = null;
                    String Remark = null;
                    String Method = null;

                    PreparedStatement sel = con.prepareStatement("Select Type,CustomerID,PurchaseCode,Remark,Method from sales where InvoiceID=?");
                    sel.setString(1, InvoiceID);

                    ResultSet rs = sel.executeQuery();
                    if (rs.next()) {
                        type = rs.getString("Type");
                        cusID = rs.getString("CustomerID");
                        PurchaseCode = rs.getString("PurchaseCode");
                        Method = rs.getString("Method");
                        Remark = rs.getString("Remark");
                    }

                    if (type.equals("Cash")) {
                        SalesTransactionEdit.Sale.setSelected(true);
                    } else if (type.equals("Credit")) {
                        SalesTransactionEdit.Credit.setSelected(true);
                    }

                    SalesTransactionEdit.InvoiceID.setText(InvoiceID);
                    SalesTransactionEdit.CustomerID.setText(cusID);
                    SalesTransactionEdit.CustomerName.setText(Customer);
                    SalesTransactionEdit.SaleDate.setDate(new Date());
                    SalesTransactionEdit.ReleaseDate.setDate(new Date());
                    SalesTransactionEdit.TotalAmount.setText(Total);
                    SalesTransactionEdit.VAT.setText(VAT);
                    SalesTransactionEdit.Remark.setText(Remark);
                    SalesTransactionEdit.Method.setSelectedItem(Method);
                    SalesTransactionEdit.PurchaseCode.setText(PurchaseCode);

                } catch (SQLException ex) {
                    Logger.getLogger(SaleM.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_EditSaleActionPerformed

    private void RefundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefundActionPerformed
        // TODO add your handling code here:

        if (!ValidateForm.isInternetReachable()) {
            try {
                Connection con = Connect.getConnection();
                con.close();
                JOptionPane.showMessageDialog(null, "There is no internet Connection!", "Internet Connectivity", JOptionPane.ERROR_MESSAGE);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else {
            DefaultTableModel Df = (DefaultTableModel) jTable2.getModel();
            int selectedIndex = jTable2.getSelectedRow();

            String InvoiceID = (Df.getValueAt(selectedIndex, 2).toString());
            String St = (String) Df.getValueAt(selectedIndex, 0);

            try {

                int confirm = JOptionPane.showConfirmDialog(null, "Do you want to refund this Sale", "Warning", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {

                    if ((St.equals("Waiting Approval"))) {

                        String Remark = JOptionPane.showInputDialog(null, "Why do you want to refund", "Mistake");
                        String Username = Login.Username.getText();

                        Connection con = Connect.getConnection();

                        insert = con.prepareStatement("update sales set status=?,Remark=?,CreatedBy=? where InvoiceID=?");
                        insert.setString(1, "Refunded");
                        insert.setString(2, Remark);
                        insert.setString(3, Username);
                        insert.setString(4, InvoiceID);

                        PreparedStatement del = con.prepareStatement("select * from salesitem where RefSale=?");
                        del.setString(1, InvoiceID);

                        ResultSet rs = del.executeQuery();

                        while (rs.next()) {

                            String id = rs.getString("ItemCode");
                            String Qty = rs.getString("SalesQty");

                            stock = con.prepareStatement("update stock set Sales=Sales-? where ItemCode=?");
                            stock.setString(1, Qty);
                            stock.setString(2, id);

                            stock.executeUpdate();
                            insert.executeUpdate();

                            CurrentStock currentStock = new CurrentStock();
                            double current = currentStock.getCurrentStock(id)[0];
                            double amount = currentStock.getCurrentStock(id)[1];

                            Current = con.prepareStatement("update stock set CurrentStock=?, StockAmount=? where ItemCode=?");
                            Current.setDouble(1, current);
                            Current.setDouble(2, amount);
                            Current.setString(3, id);

                            Current.executeUpdate();

                            Current = con.prepareStatement("update item set CurrentStock=? where ItemCode=?");
                            Current.setDouble(1, current);
                            Current.setString(2, id);

                            Current.executeUpdate();

                        }

                        PreparedStatement met = con.prepareStatement("select * from sales where InvoiceID=?");
                        met.setString(1, InvoiceID);

                        String BankPaid = "Cash";

                        ResultSet Bank = met.executeQuery();
                        if (Bank.next()) {
                            BankPaid = Bank.getString("Method");
                        }

                        String CusName = Df.getValueAt(selectedIndex, 3).toString();
                        double Tot = Double.parseDouble(Df.getValueAt(selectedIndex, 6).toString().replace(",", ""));

                        if (BankPaid.contains("Bank")) {

                            MetBank = con.prepareStatement("insert into bank(Purpose,GivenBy,ReceivedBy,BOUT,Balance,Bank,TxnId) values (?,?,?,?,?,?,?)");
                            MetBank.setString(1, "Refunded");
                            MetBank.setString(2, CusName);
                            MetBank.setString(3, Username);
                            MetBank.setDouble(4, Tot);
                            MetBank.setDouble(5, Tot);
                            MetBank.setString(6, BankPaid);
                            MetBank.setString(7, "Ref " + InvoiceID);

                            MetBank.executeUpdate();

                            Bal = con.prepareStatement("select SUM(BIN) as BIN, SUM(BOUT) as BOUT from bank where bank=?");
                            Bal.setString(1, BankPaid);

                            ResultSet rss = Bal.executeQuery();
                            double IN, OUT, bal = 0;
                            if (rss.next()) {
                                IN = rss.getDouble("BIN");
                                OUT = rss.getDouble("BOUT");
                                bal = IN - OUT;
                            }

                            MetBank = con.prepareStatement("update bank set Balance=? where TxnId=?");
                            MetBank.setDouble(1, bal);
                            MetBank.setString(2, "Ref " + InvoiceID);

                            MetBank.executeUpdate();

                        }

                        insert.executeUpdate();

                        JOptionPane.showMessageDialog(null, "Sale Refunded Successfully!");
                        table_updates();
                    } else {
                        JOptionPane.showMessageDialog(null, "Sale can't be Refunded!");
                    }
                }
            } catch (SQLException ex) {
                java.util.logging.Logger.getLogger(SaleM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_RefundActionPerformed

    private void startDateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startDateMouseClicked
        // TODO add your handling code here: 

        DefaultTableModel src = (DefaultTableModel) jTable2.getModel();
        TableRowSorter<DefaultTableModel> obj = new TableRowSorter<>(src);
        jTable2.setRowSorter(obj);
        obj.setRowFilter(RowFilter.regexFilter(startDate.getDateFormatString(), 4));

    }//GEN-LAST:event_startDateMouseClicked

    private void startDateInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_startDateInputMethodTextChanged
        // TODO add your handling code here:

        DefaultTableModel src = (DefaultTableModel) jTable2.getModel();
        TableRowSorter<DefaultTableModel> obj = new TableRowSorter<>(src);
        jTable2.setRowSorter(obj);
        obj.setRowFilter(RowFilter.regexFilter(startDate.getDateFormatString(), 4));

    }//GEN-LAST:event_startDateInputMethodTextChanged

    private void startDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_startDateFocusGained
        // TODO add your handling code here:
        SimpleDateFormat sDate = new SimpleDateFormat("yyyy-MM-dd");
        String date = sDate.format(startDate.getDate());
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        TableRowSorter tr = new TableRowSorter(model);
        jTable2.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(date.trim(), 4));
    }//GEN-LAST:event_startDateFocusGained

    private void startDateKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_startDateKeyReleased
        // TODO add your handling code here:
        SimpleDateFormat sDate = new SimpleDateFormat("yyyy-MM-dd");
        String date = sDate.format(startDate.getDate());
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        TableRowSorter tr = new TableRowSorter(model);
        jTable2.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(date.trim(), 4));
    }//GEN-LAST:event_startDateKeyReleased

    private void ZReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZReportActionPerformed
        // TODO add your handling code here:
        JPanel datePanel = new JPanel(new GridLayout(3, 2));
        startDateChooser = new JDateChooser();
        endDateChooser = new JDateChooser();
        datePanel.add(new JLabel("Start Date:"));
        datePanel.add(startDateChooser);
        datePanel.add(new JLabel("End Date:"));
        datePanel.add(endDateChooser);

        int result = JOptionPane.showConfirmDialog(this, datePanel, "Select Date Range",
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (result == JOptionPane.OK_OPTION) {
            Date startDate = startDateChooser.getDate();
            Date endDate = endDateChooser.getDate();

            // Confirm report generation
            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to generate the Z Report?",
                    "Confirm", JOptionPane.YES_NO_OPTION);

            if (startDate == null || endDate == null) {
                JOptionPane.showMessageDialog(this, "Please select both dates.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (confirm == JOptionPane.YES_OPTION) {
                // Prompt for file path and name
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setDialogTitle("Save Z Report");
                fileChooser.setSelectedFile(new File("ZReport.pdf"));
                int fileResult = fileChooser.showSaveDialog(this);

                if (fileResult == JFileChooser.APPROVE_OPTION) {
                    File file = fileChooser.getSelectedFile();
                    String filePath = file.getAbsolutePath();

                    // Ensure the file has .pdf extension
                    if (!filePath.toLowerCase().endsWith(".pdf")) {
                        filePath += ".pdf";
                    }

                    // Call your report generation function here
                    generateZReport(startDate, endDate, filePath);
                }
            }
        }
    }//GEN-LAST:event_ZReportActionPerformed

    private void generateZReport(Date startDate, Date endDate, String filePath) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String startDateStr = sdf.format(startDate);
        String endDateStr = sdf.format(endDate);

        try {
            String query = "SELECT CreatedBy, "
                    + "SUM(CASE WHEN Method = 'Cash' THEN TotalAmount ELSE 0 END) AS TotalCash, "
                    + "SUM(CASE WHEN Method IS NULL THEN TotalAmount ELSE 0 END) AS TotalCreditIssued, "
                    + "SUM(CASE WHEN Method = 'Paid' THEN TotalAmount ELSE 0 END) AS TotalCreditPaid "
                    + "FROM sales WHERE CreatedAt BETWEEN ? AND ? GROUP BY CreatedBy";

            String totalQuery = "SELECT "
                    + "SUM(CASE WHEN Method = 'Cash' THEN TotalAmount ELSE 0 END) AS TotalCash, "
                    + "SUM(CASE WHEN Method IS NULL THEN TotalAmount ELSE 0 END) AS TotalCreditIssued, "
                    + "SUM(CASE WHEN Method = 'Paid' THEN TotalAmount ELSE 0 END) AS TotalCreditPaid "
                    + "FROM sales WHERE CreatedAt BETWEEN ? AND ?";

            Connection conn = Connect.getConnection();

            try (PreparedStatement stmt = conn.prepareStatement(query); PreparedStatement totalStmt = conn.prepareStatement(totalQuery)) {
                stmt.setString(1, startDateStr);
                stmt.setString(2, endDateStr);
                totalStmt.setString(1, startDateStr);
                totalStmt.setString(2, endDateStr);

                try (ResultSet rs = stmt.executeQuery(); ResultSet totalRs = totalStmt.executeQuery()) {
                    try (PdfWriter writer = new PdfWriter(filePath); PdfDocument pdfDoc = new PdfDocument(writer); Document document = new Document(pdfDoc)) {

                        document.add(new Paragraph("Z Report"));
                        document.add(new Paragraph(""));
                        document.add(new Paragraph("Date Range: " + startDateStr + " to " + endDateStr));
                        document.add(new Paragraph(""));

                        while (rs.next()) {
                            String createdBy = rs.getString("CreatedBy");
                            double totalCash = rs.getDouble("TotalCash");
                            double totalCreditIssued = rs.getDouble("TotalCreditIssued");
                            double totalCreditPaid = rs.getDouble("TotalCreditPaid");

                            document.add(new Paragraph("User: " + createdBy));
                            document.add(new Paragraph("Total Cash: " + totalCash));
                            document.add(new Paragraph("Total Credit Issued: " + totalCreditIssued));
                            document.add(new Paragraph("Total Credit Paid: " + totalCreditPaid));
                            document.add(new Paragraph(""));
                        }

                        if (totalRs.next()) {
                            double grandTotalCash = totalRs.getDouble("TotalCash");
                            double grandTotalCreditIssued = totalRs.getDouble("TotalCreditIssued");
                            double grandTotalCreditPaid = totalRs.getDouble("TotalCreditPaid");

                            document.add(new Paragraph("Grand Totals:"));
                            document.add(new Paragraph("Total Cash: " + grandTotalCash));
                            document.add(new Paragraph("Total Credit Issued: " + grandTotalCreditIssued));
                            document.add(new Paragraph("Total Credit Paid: " + grandTotalCreditPaid));
                        }
                    }

                    JOptionPane.showMessageDialog(null, "Report generated successfully: " + filePath);
                }
            }
        } catch (SQLException | IOException e) {
            e.printStackTrace();
        }
    }

    private JDateChooser startDateChooser;
    private JDateChooser endDateChooser;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Approve;
    private javax.swing.JButton EditSale;
    private javax.swing.JButton Exit;
    private javax.swing.JButton Export;
    private javax.swing.JTextField Invoice;
    private javax.swing.JButton Refresh;
    private javax.swing.JButton Refund;
    private javax.swing.JButton ZReport;
    private javax.swing.JButton addNew;
    private com.toedter.calendar.JDateChooser endDate;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JButton searchBetween;
    private com.toedter.calendar.JDateChooser startDate;
    private javax.swing.JComboBox<String> status;
    private javax.swing.JTextField totAmount;
    private javax.swing.JTextField totVAT;
    // End of variables declaration//GEN-END:variables

}
